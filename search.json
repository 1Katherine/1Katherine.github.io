[{"title":"1. NC78 反转链表","url":"/2022/06/22/1-NC78-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/","content":"<blockquote>\n<p>题目链接：<a href=\"https://www.nowcoder.com/practice/75e878df47f24fdc9dc3e400ec6058ca?tpId=117&amp;tqId=37777&amp;rp=1&amp;ru=/exam/oj&amp;qru=/exam/oj&amp;sourceUrl=/exam/oj?page=1&tab=%25E7%25AE%2597%25E6%25B3%2595%25E7%25AF%2587&topicId=117&amp;difficulty=undefined&amp;judgeStatus=undefined&amp;tags=&amp;title=\">https://www.nowcoder.com/practice/75e878df47f24fdc9dc3e400ec6058ca?tpId=117&amp;tqId=37777&amp;rp=1&amp;ru=/exam/oj&amp;qru=/exam/oj&amp;sourceUrl=%2Fexam%2Foj%3Fpage%3D1%26tab%3D%25E7%25AE%2597%25E6%25B3%2595%25E7%25AF%2587%26topicId%3D117&amp;difficulty=undefined&amp;judgeStatus=undefined&amp;tags=&amp;title=</a></p>\n</blockquote>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>给定一个单链表的头结点pHead(该头节点是有值的，比如在下图，它的val是1)，长度为n，反转该链表后，返回新链表的表头。</p>\n<p>数据范围： 0≤<em>n</em>≤1000</p>\n<p>要求：空间复杂度<em>O</em>(1) ，时间复杂度<em>O</em>(<em>n</em>) 。</p>\n<p>如当输入链表{1,2,3}时，</p>\n<p>经反转后，原链表变为{3,2,1}，所以对应的输出为{3,2,1}。</p>\n<p>以上转换过程如下图所示：</p>\n<img src=\"/2022/06/22/1-NC78-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/image-20220622112112689.png\" class=\"\" title=\"image-20220622112112689\">\n\n<h2 id=\"示例1\"><a href=\"#示例1\" class=\"headerlink\" title=\"示例1\"></a>示例1</h2><p>输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;1,2,3&#125;</span><br></pre></td></tr></table></figure>\n\n<p>返回值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;3,2,1&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例2\"><a href=\"#示例2\" class=\"headerlink\" title=\"示例2\"></a>示例2</h2><p>输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>返回值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>说明：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">空链表则输出空                  </span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int val;</span></span><br><span class=\"line\"><span class=\"comment\">    ListNode next = null;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    ListNode(int val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode <span class=\"title function_\">ReverseList</span><span class=\"params\">(ListNode head)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//         空链表</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">p1</span> <span class=\"operator\">=</span> head.next; <span class=\"comment\">// 指向待反转链表的尾节点（2），head指向已反转的头节点（1），反转后 2-》1</span></span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">p2</span> <span class=\"operator\">=</span> head.next.next;  <span class=\"comment\">// 指向待反转链表的倒数第二节点 （3）用于链表不断连</span></span><br><span class=\"line\">        head.next = <span class=\"literal\">null</span>;  <span class=\"comment\">// 如果缺少这一步，会报错“超出时间限制” ，一定要将反转后的链表尾指针指向null</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p2 != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            p1.next = head; <span class=\"comment\">// 部分反转</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            head = p1;</span><br><span class=\"line\">            p1 = p2;</span><br><span class=\"line\">            p2 = p2.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\">//        p2 == null ; 反转到最后</span></span><br><span class=\"line\">        p1.next = head;</span><br><span class=\"line\">        head = p1;</span><br><span class=\"line\">        </span><br><span class=\"line\">       <span class=\"keyword\">return</span> head; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分析情况\"><a href=\"#分析情况\" class=\"headerlink\" title=\"分析情况\"></a>分析情况</h2><ol>\n<li>反转空链表 —- 返回head</li>\n<li>反转只有一个元素的链表 —- 返回head</li>\n<li>反转有两个以上元素的链表</li>\n</ol>\n<h2 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h2><img src=\"/2022/06/22/1-NC78-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/image-20220622111630985.png\" class=\"\" title=\"image-20220622111630985\">","categories":["牛客刷题"],"tags":["简单"]},{"title":"1 面试题：cookie、session、tokenz的作用和区别","url":"/2022/06/27/1-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9Acookie%E3%80%81session%E3%80%81tokenz%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%8C%BA%E5%88%AB/","content":"<p>下面这位博主的视频讲解通俗易懂，本文内容也是在该视频的基础上进行梳理，可供参考：</p>\n<p>Cookie、Session、Token究竟区别在哪？如何进行身份认证，保持用户登录状态？</p>\n<p><a href=\"https://www.bilibili.com/video/BV1ob4y1Y7Ep?spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=bb5470bf26d0ba6f7869d61cafcf5a24\">https://www.bilibili.com/video/BV1ob4y1Y7Ep?spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=bb5470bf26d0ba6f7869d61cafcf5a24</a></p>\n<p>以bilibili登录为例</p>\n<p>进入登录界面，输入用户名和密码后，很长一段时间都不用再重新到登陆页面输入账号密码。这种保存登录状态的方式是如何实现的呢？</p>\n<p>众所周知，http是无状态的，即这次访问服务器，关闭网页后，再次访问服务器，服务器是没有意识到又是你来访问的。</p>\n<p>cookie可以实现每次请求自动带数据传递给浏览器。即下次登录无需再输入用户名和密码，而是通过将cookie放入请求头，自动在请求时由cookie携带用户信息，实现保存登录状态。</p>\n<h3 id=\"cookie的流程\"><a href=\"#cookie的流程\" class=\"headerlink\" title=\"cookie的流程\"></a>cookie的流程</h3><img src=\"/2022/06/27/1-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9Acookie%E3%80%81session%E3%80%81tokenz%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%8C%BA%E5%88%AB/image-20220627103513030.png\" class=\"\" title=\"image-20220627103513030\">\n\n<p>简要来说，cookie是保存在浏览器的数据，它存储了用户名和密码，以实现记录登录状态。同时cookie具有有效时常，超过时长后清除原来的cookie，下次登录时需要重新输入用户名密码，新建cookie保存信息，以记录登录状态。</p>\n<p>cookie的核心：每个请求都会携带cookie发送给服务器。（cookie放在请求头)</p>\n<h4 id=\"浏览器中可以查看cookie\"><a href=\"#浏览器中可以查看cookie\" class=\"headerlink\" title=\"浏览器中可以查看cookie\"></a>浏览器中可以查看cookie</h4><img src=\"/2022/06/27/1-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9Acookie%E3%80%81session%E3%80%81tokenz%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%8C%BA%E5%88%AB/image-20220627103920584.png\" class=\"\" title=\"image-20220627103920584\">\n\n<p>缺陷：由于cookie直接把用户信息存储在浏览器，只要电脑被黑，用户信息就会泄露，因此出现session技术。</p>\n<h3 id=\"Session会话-基于cookie的session\"><a href=\"#Session会话-基于cookie的session\" class=\"headerlink\" title=\"Session会话(基于cookie的session)\"></a>Session会话(基于cookie的session)</h3><p>相当于把原来cookie浏览器端保存的用户名和密码换成服务器端数据库中的sessionId（由服务器产生的没有规律的字符串）。即cookie中不保存用户名密码，而是sessionId和会话结束事件Max-age。</p>\n<img src=\"/2022/06/27/1-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9Acookie%E3%80%81session%E3%80%81tokenz%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%8C%BA%E5%88%AB/image-20220627104827309.png\" class=\"\" title=\"image-20220627104827309\">\n\n<p>缺陷：由于用户群体迅速扩张，在特定时间有大量用户访问服务器的时候，服务器需要保存的sessionId数量迅速增长，会造成服务器超载</p>\n<p>JWT（Json Web Token）</p>\n<p>服务器生成JWT，存储对JWT签名的密文，不存储JWT。JWT传递给浏览器存储（cookie或storage的形式存储）</p>\n<img src=\"/2022/06/27/1-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9Acookie%E3%80%81session%E3%80%81tokenz%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%8C%BA%E5%88%AB/image-20220627105421281.png\" class=\"\" title=\"image-20220627105421281\">\n\n<h4 id=\"JWT的组成\"><a href=\"#JWT的组成\" class=\"headerlink\" title=\"JWT的组成\"></a>JWT的组成</h4><img src=\"/2022/06/27/1-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9Acookie%E3%80%81session%E3%80%81tokenz%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%8C%BA%E5%88%AB/image-20220627105536380.png\" class=\"\" title=\"image-20220627105536380\">\n\n<p>header：声明用什么算法来生成签名</p>\n<p>payload：存储有效期等数据</p>\n<p>signature：签名的信息</p>\n<img src=\"/2022/06/27/1-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9Acookie%E3%80%81session%E3%80%81tokenz%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%8C%BA%E5%88%AB/image-20220627105711878.png\" class=\"\" title=\"image-20220627105711878\">\n","categories":["前端面试题"],"tags":["cookie"]},{"title":"2. BM2 链表内指定区间反转","url":"/2022/06/23/2-BM2-%E9%93%BE%E8%A1%A8%E5%86%85%E6%8C%87%E5%AE%9A%E5%8C%BA%E9%97%B4%E5%8F%8D%E8%BD%AC/","content":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>将一个节点数为 size 链表 m 位置到 n 位置之间的区间反转，要求时间复杂度 O(n)<em>O</em>(<em>n</em>)，空间复杂度 O(1)<em>O</em>(1)。<br>例如：<br>给出的链表为 1→2→3→4→5→<em>N<strong>U</strong>LL</em>, m&#x3D;2,n&#x3D;4<br>返回1→4→3→2→5→<em>N<strong>U</strong>LL</em>.</p>\n<p>数据范围： 链表长度0&lt;<em>s<strong>i</strong>ze</em>≤1000，0&lt;<em>m</em>≤<em>n</em>≤<em>s<strong>i</strong>ze</em>，链表中每个节点的值满足∣<em>v<strong>a</strong>l</em>∣≤1000</p>\n<p>要求：时间复杂度 O(n)，空间复杂度 O(n)</p>\n<p>进阶：时间复杂度 O(n)，空间复杂度 O(1)</p>\n<h2 id=\"示例1\"><a href=\"#示例1\" class=\"headerlink\" title=\"示例1\"></a>示例1</h2><p>输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;1,2,3,4,5&#125;,2,4</span><br></pre></td></tr></table></figure>\n\n<p>返回值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;1,4,3,2,5&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例2\"><a href=\"#示例2\" class=\"headerlink\" title=\"示例2\"></a>示例2</h2><p>输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;5&#125;,1,1</span><br></pre></td></tr></table></figure>\n\n<p>返回值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;5&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h2><ol>\n<li><p>如果m &#x3D;&#x3D; n：返回原链表头节点</p>\n</li>\n<li><p>如果 m ！&#x3D; n: </p>\n<ol>\n<li><p>比如1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6 反转后 1-&gt;5-&gt;4-&gt;3-&gt;2-&gt;6 </p>\n</li>\n<li><p>先反转部分链表 2-&gt;3-&gt;4-&gt;5 变成 5-&gt;4-&gt;3-&gt;2 </p>\n<ol>\n<li>pre&#x2F;cur&#x2F;post记录待反转节点 pre&#x3D;2，cur&#x3D;3，post&#x3D;4</li>\n<li>反转 cur.next&#x3D;pre;pre&#x3D;cur;cur&#x3D;post;post&#x3D;post.next;</li>\n<li>如果pre&#x3D;5代表部分反转完成</li>\n</ol>\n</li>\n<li><p>再收尾连接</p>\n<ol>\n<li>phead 记录 需要连接到反转链表头部的指针 p1 指向 1</li>\n<li>ptail 记录 需要连接到反转链表尾部的指针  p2 指向 6</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n","categories":["牛客刷题"],"tags":["中等"]},{"title":"JavaScript基础与进阶知识","url":"/2022/07/31/JavaScript%E5%9F%BA%E7%A1%80%E4%B8%8E%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86/","content":"<p>s</p>\n<h2 id=\"JS进阶\"><a href=\"#JS进阶\" class=\"headerlink\" title=\"JS进阶\"></a>JS进阶</h2><h3 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h3><p>[它允许在变量声明之前即被访问]</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  <span class=\"comment\">// 访问变量 str</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str + <span class=\"string\">&#x27;world!&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 声明变量 str</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;hello &#x27;</span>;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span>和<span class=\"keyword\">var</span>都有提升，但是<span class=\"keyword\">let</span>定义的变量没有赋值之前是不可以使用、<span class=\"keyword\">var</span>可以使用是<span class=\"literal\">undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ol>\n<li>变量在未声明即被访问时会报语法错误</li>\n<li>变量在声明之前即被访问，变量的值为 <code>undefined</code></li>\n<li><code>let</code> 声明的变量不存在变量提升，推荐使用 <code>let</code>【也有人认为具有提升但是不赋值不能使用】</li>\n<li>变量提升出现在相同作用域当中</li>\n<li>实际开发中推荐先声明再访问变量</li>\n</ol>\n<h3 id=\"函数提升\"><a href=\"#函数提升\" class=\"headerlink\" title=\"函数提升\"></a>函数提升</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  <span class=\"comment\">// 调用函数</span></span><br><span class=\"line\">  <span class=\"title function_\">foo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 声明函数</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;声明之前即被调用...&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 不存在提升现象</span></span><br><span class=\"line\">  <span class=\"title function_\">bar</span>();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> bar = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;函数表达式不存在提升现象...&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ol>\n<li>函数提升能够使函数的声明调用更灵活</li>\n<li>函数表达式不存在提升的现象</li>\n<li>函数提升出现在相同作用域当中</li>\n</ol>\n<h3 id=\"函数参数【默认值、动态参数、剩余参数】\"><a href=\"#函数参数【默认值、动态参数、剩余参数】\" class=\"headerlink\" title=\"函数参数【默认值、动态参数、剩余参数】\"></a>函数参数【默认值、动态参数、剩余参数】</h3><h4 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  <span class=\"comment\">// 设置参数默认值</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">sayHi</span>(<span class=\"params\">name=<span class=\"string\">&quot;小明&quot;</span>, age=<span class=\"number\">18</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"string\">`&lt;p&gt;大家好，我叫<span class=\"subst\">$&#123;name&#125;</span>，我今年<span class=\"subst\">$&#123;age&#125;</span>岁了。&lt;/p&gt;`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 调用函数</span></span><br><span class=\"line\">  <span class=\"title function_\">sayHi</span>();</span><br><span class=\"line\">  <span class=\"title function_\">sayHi</span>(<span class=\"string\">&#x27;小红&#x27;</span>);</span><br><span class=\"line\">  <span class=\"title function_\">sayHi</span>(<span class=\"string\">&#x27;小刚&#x27;</span>, <span class=\"number\">21</span>);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ol>\n<li>声明函数时为形参赋值即为参数的默认值</li>\n<li>如果参数未自定义默认值时，参数的默认值为 <code>undefined</code></li>\n<li>调用函数时没有传入对应实参时，参数的默认值被当做实参传入</li>\n</ol>\n<h4 id=\"动态参数\"><a href=\"#动态参数\" class=\"headerlink\" title=\"动态参数\"></a>动态参数</h4><p><code>arguments</code> 是函数内部内置的伪数组变量，它包含了调用函数时传入的所有实参。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  <span class=\"comment\">// 求生函数，计算所有参数的和</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(arguments);</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> s = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      s += <span class=\"variable language_\">arguments</span>[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 调用求和函数</span></span><br><span class=\"line\">  <span class=\"title function_\">sum</span>(<span class=\"number\">5</span>, <span class=\"number\">10</span>); <span class=\"comment\">// 两个参数</span></span><br><span class=\"line\">  <span class=\"title function_\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>); <span class=\"comment\">// 两个参数</span></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ol>\n<li><code>arguments</code> 是一个伪数组</li>\n<li><code>arguments</code> 的作用是动态获取函数的实参</li>\n</ol>\n<h4 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"剩余参数\"></a>剩余参数</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">config</span>(<span class=\"params\">baseURL, ...other</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(baseURL);</span><br><span class=\"line\">    <span class=\"comment\">// other 是真数组，动态获取实参</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(other);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 调用函数</span></span><br><span class=\"line\">  <span class=\"title function_\">config</span>(<span class=\"string\">&#x27;http://baidu.com&#x27;</span>, <span class=\"string\">&#x27;get&#x27;</span>, <span class=\"string\">&#x27;json&#x27;</span>);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ol>\n<li><p><code>...</code> 是语法符号，置于最末函数形参之前，用于获取多余的实参</p>\n</li>\n<li><p>借助 <code>...</code> 获取的剩余实参</p>\n</li>\n</ol>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p>箭头函数是一种声明函数的简洁语法，它与普通函数并无本质的区别，差异性更多体现在语法格式上。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  // 箭头函数</span><br><span class=\"line\">  let foo = () =&gt; &#123;</span><br><span class=\"line\">    console.log(&#x27;^_^ 长相奇怪的函数...&#x27;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 调用函数</span><br><span class=\"line\">  foo();</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 更简洁的语法</span><br><span class=\"line\">  let form = document.querySelector(&#x27;form&#x27;);</span><br><span class=\"line\">  form.addEventListener(&#x27;click&#x27;, ev =&gt; ev.preventDefault());</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ol>\n<li>箭头函数属于表达式函数，因此不存在函数提升</li>\n<li>箭头函数只有一个参数时可以省略圆括号 <code>()</code></li>\n<li>箭头函数函数体只有一行代码时可以省略花括号 <code>&#123;&#125;</code>，并自动做为返回值被返回</li>\n<li>箭头函数中没有 <code>arguments</code>，只能使用 <code>...</code> 动态获取实参</li>\n<li>涉及到this的使用，不建议用箭头函数</li>\n</ol>\n<h3 id=\"箭头函数与普通函数的this指向问题\"><a href=\"#箭头函数与普通函数的this指向问题\" class=\"headerlink\" title=\"箭头函数与普通函数的this指向问题\"></a>箭头函数与普通函数的this指向问题</h3><h2 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h2><blockquote>\n<p>知道解构的语法及分类，使用解构简洁语法快速为变量赋值。</p>\n</blockquote>\n<p>解构赋值是一种快速为变量赋值的简洁语法，本质上仍然是为变量赋值，分为数组解构、对象解构两大类型。</p>\n<h3 id=\"数组解构\"><a href=\"#数组解构\" class=\"headerlink\" title=\"数组解构\"></a>数组解构</h3><p>数组解构是将数组的单元值快速批量赋值给一系列变量的简洁语法，如下代码所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 普通的数组</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 批量声明变量 a b c </span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 同时将数组单元值 1 2 3 依次赋值给变量 a b c</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> [a, b, c] = arr;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// 1</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// 2</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c); <span class=\"comment\">// 3</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ol>\n<li>赋值运算符 <code>=</code> 左侧的 <code>[]</code> 用于批量声明变量，右侧数组的单元值将被赋值给左侧的变量</li>\n<li>变量的顺序对应数组单元值的位置依次进行赋值操作</li>\n<li>变量的数量大于单元值数量时，多余的变量将被赋值为  <code>undefined</code></li>\n<li>变量的数量小于单元值数量时，可以通过 <code>...</code> 获取剩余单元值，但只能置于最末位</li>\n<li>允许初始化变量的默认值，且只有单元值为 <code>undefined</code> 时默认值才会生效</li>\n</ol>\n<p>注：支持多维解构赋值，比较复杂后续有应用需求时再进一步分析</p>\n<h3 id=\"对象解构\"><a href=\"#对象解构\" class=\"headerlink\" title=\"对象解构\"></a>对象解构</h3><p>对象解构是将对象属性和方法快速批量赋值给一系列变量的简洁语法，如下代码所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 普通对象</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> user = &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;小明&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">age</span>: <span class=\"number\">18</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 批量声明变量 name age</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 同时将数组单元值 1 2 3 依次赋值给变量 a b c</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> &#123;name, age&#125; = user;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// 小明</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age); <span class=\"comment\">// 18</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ol>\n<li>赋值运算符 <code>=</code> 左侧的 <code>&#123;&#125;</code> 用于批量声明变量，右侧对象的属性值将被赋值给左侧的变量</li>\n<li>对象属性的值将被赋值给与属性名<strong>相同</strong>的变量</li>\n<li>对象中<strong>找不到</strong>与变量名一致的属性时变量值为 <code>undefined</code></li>\n<li>允许初始化变量的默认值，属性不存在或单元值为 <code>undefined</code> 时默认值才会生效</li>\n</ol>\n<p>注：支持多维解构赋值，比较复杂后续有应用需求时再进一步分析</p>\n","categories":["前端面试"],"tags":["JavaScript"]},{"title":"JavaScript进阶 - 面向对象、构造函数","url":"/2022/07/31/JavaScript%E8%BF%9B%E9%98%B6-%E4%B8%80%E5%88%87%E7%9A%86%E4%B8%BA%E5%AF%B9%E8%B1%A1/","content":"<h3 id=\"一、面向对象\"><a href=\"#一、面向对象\" class=\"headerlink\" title=\"一、面向对象\"></a>一、面向对象</h3><blockquote>\n<p>了解面向对象的基础概念，能够利用构造函数创建对象。</p>\n</blockquote>\n<h4 id=\"1-1-构造函数\"><a href=\"#1-1-构造函数\" class=\"headerlink\" title=\"1.1 构造函数\"></a>1.1 构造函数</h4><p>构造函数是专门用于创建对象的函数，如果一个函数使用 <code>new</code> 关键字调用，那么这个函数就是构造函数。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 定义函数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;通过 new 也能调用函数...&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 调用函数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">new</span> foo;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ol start=\"2\">\n<li>使用 <code>new</code> 关键字调用函数的行为被称为实例化</li>\n<li>实例化构造函数时没有参数时可以省略 <code>()</code></li>\n<li>构造函数的返回值即为新创建的对象</li>\n<li>构造函数内部的 <code>return</code> 返回的值无效！</li>\n</ol>\n<p>注：实践中为了从视觉上区分构造函数和普通函数，习惯将构造函数的首字母大写。</p>\n<h4 id=\"1-2-实例成员\"><a href=\"#1-2-实例成员\" class=\"headerlink\" title=\"1.2 实例成员\"></a>1.2 实例成员</h4><p>通过构造函数创建的对象称为实例对象，实例对象中的属性和方法称为实例成员。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 构造函数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 构造函数内部的 this 就是实例对象</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 实例对象中动态添加属性</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;小明&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 实例对象动态添加方法</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sayHi</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;大家好~&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 实例化，p1 是实例对象</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// p1 实际就是 构造函数内部的 this</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p1);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p1.<span class=\"property\">name</span>); <span class=\"comment\">// 访问实例属性</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  p1.<span class=\"title function_\">sayHi</span>(); <span class=\"comment\">// 调用实例方法</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ol>\n<li>构造函数内部 <code>this</code> 实际上就是实例对象，为其动态添加的属性和方法即为实例成员</li>\n<li>为构造函数传入参数，动态创建结构相同但值不同的对象</li>\n<li>实例对象的 <code>constructor</code>  属性指向了构造函数</li>\n<li><code>instanceof</code> 用于检测实例对象对应的构造函数</li>\n</ol>\n<p>注：构造函数创建的实例对象彼此独立互不影响。</p>\n<h4 id=\"1-3-静态成员\"><a href=\"#1-3-静态成员\" class=\"headerlink\" title=\"1.3 静态成员\"></a>1.3 静态成员</h4><p>在 JavaScript 中底层函数本质上也是对象类型，因此允许直接为函数动态添加属性或方法，构造函数的属性和方法被称为静态成员。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 构造函数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name, age</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 省略实例成员</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 静态属性</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title class_\">Person</span>.<span class=\"property\">eyes</span> = <span class=\"number\">2</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title class_\">Person</span>.<span class=\"property\">arms</span> = <span class=\"number\">2</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 静态方法</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title class_\">Person</span>.<span class=\"property\">walk</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;^_^人都会走路...&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// this 指向 Person</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">eyes</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ol>\n<li>静态成员指的是添加到构造函数本身的属性和方法</li>\n<li>一般公共特征的属性或方法静态成员设置为静态成员</li>\n<li>静态成员方法中的 <code>this</code> 指向构造函数本身</li>\n</ol>\n<h3 id=\"一切皆对象\"><a href=\"#一切皆对象\" class=\"headerlink\" title=\"一切皆对象\"></a>一切皆对象</h3><blockquote>\n<p>体会 JavaScript 一切皆对象的语言特征，掌握各引用类型和包装类型对象属性和方法的使用。</p>\n</blockquote>\n<p>在 JavaScript 中<strong>最主要</strong>的数据类型有 6 种，分别是字符串、数值、布尔、undefined、null 和 对象，常见的对象类型数据包括数组和普通对象。其中字符串、数值、布尔、undefined、null 也被称为简单类型或基础类型，对象也被称为引用类型。</p>\n<p>在 JavaScript 内置了一些构造函数，绝大部的数据处理都是基于这些构造函数实现的，JavaScript 基础阶段学习的 <code>Date</code> 就是内置的构造函数。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 实例化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">  </span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// date 即为实例对象</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\">    简单数据类型：字符串、数字、布尔、<span class=\"literal\">undefined</span>、<span class=\"literal\">null</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    (引用类型)复杂数据类型：对象（数组）</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>甚至字符串、数值、布尔、数组、普通对象也都有专门的构造函数，用于创建对应类型的数据。</p>\n<h4 id=\"2-1-引用类型\"><a href=\"#2-1-引用类型\" class=\"headerlink\" title=\"2.1 引用类型\"></a>2.1 引用类型</h4><h5 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h5><p><code>Object</code> 是内置的构造函数，用于创建普通对象。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 通过构造函数创建普通对象</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> user = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>(&#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;小明&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">15</span>&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 这种方式声明的变量称为【字面量】</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> student = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;杜子腾&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">21</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  </span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 对象语法简写</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> name = <span class=\"string\">&#x27;小红&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> people = &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 相当于 name: name</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    name,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 相当于 walk: function () &#123;&#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    walk () &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;人都要走路...&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(student.<span class=\"property\">constructor</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(user.<span class=\"property\">constructor</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(student <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>下图展示了普通对象在内存中的存储方式：<strong>普通对象数据保存在堆内存之中，栈内存中保存了普通对象在堆内存的地址</strong>。</p>\n<p>![memory](D:\\桌面\\黑马2022讲义\\003- JavaScript基础到高级\\JavaScript高级课程资料\\day2\\笔记\\assets\\object-1.png)</p>\n<p><strong>普通对象在赋值时只是复制了栈内中的地址，而非堆内存中的数据</strong>，如下图所示：</p>\n<p>![heap-2](D:\\桌面\\黑马2022讲义\\003- JavaScript基础到高级\\JavaScript高级课程资料\\day2\\笔记\\assets\\object-2.png)</p>\n<p>普通对象赋值后，<code>无论修改哪个变量另一个对象的数据值也会相当发生改变</code>。</p>\n<p>总结：</p>\n<ol>\n<li>推荐使用字面量方式声明对象，而不是 <code>Object</code> 构造函数</li>\n<li><code>Object.assign</code> 静态方法创建新的对象</li>\n<li><code>Object.keys</code> 静态方法获取对象中所有属性</li>\n<li><code>Object.values</code> 表态方法获取对象中所有属性值</li>\n</ol>\n<p>面试回答堆与栈的区别：</p>\n<ol>\n<li>堆和栈是内存中的数据存储空间</li>\n<li>简单类型的数据保存在内存的栈空间中</li>\n<li>引用类型的数据保存在内存的堆空间中，栈内存中存取的是引用类型的地址（房间号）</li>\n</ol>\n<h5 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h5><p><code>Array</code> 是内置的构造函数，用于创建数组。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 构造函数创建数组</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> arr = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 字面量方式创建数组</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> list = [<span class=\"string\">&#x27;html&#x27;</span>, <span class=\"string\">&#x27;css&#x27;</span>, <span class=\"string\">&#x27;javascript&#x27;</span>];</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(list.<span class=\"property\">constructor</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(list <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>数组在内存中的存储方式与普通对象一样，如下图所示：</p>\n<p>![memory](D:\\桌面\\黑马2022讲义\\003- JavaScript基础到高级\\JavaScript高级课程资料\\day2\\笔记\\assets\\array-1.png)</p>\n<p>数组在赋值时只是复制了栈内中的地址，而非堆内存中的数据，如下图所示：</p>\n<p>![array-2](D:\\桌面\\黑马2022讲义\\003- JavaScript基础到高级\\JavaScript高级课程资料\\day2\\笔记\\assets\\array-2.png)</p>\n<p>数组赋值后，无论修改哪个变量另一个对象的数据值也会相当发生改变。</p>\n<p>总结：</p>\n<ol>\n<li>推荐使用字面量方式声明数组，而不是 <code>Array</code> 构造函数</li>\n<li>实例方法 <code>forEach</code> 用于遍历数组，替代 <code>for</code> 循环</li>\n<li>实例方法 <code>filter</code> 过滤数组单元值，生成新数组</li>\n<li>实例方法 <code>map</code> 迭代原数组，生成新数组</li>\n<li>实例方法 <code>join</code> 数组单元素拼接成了符串</li>\n<li>实例方法 <code>concat</code>  合并两个数组，生成新数组</li>\n<li>实例方法 <code>sort</code> 对原数组单元值排序</li>\n<li>实例方法 <code>splice</code> 删除或替换原数组单元</li>\n<li>实例方法 <code>indexOf</code> 检索数组单元值</li>\n<li>实例方法 <code>reverse</code> 反转数组</li>\n<li>静态方法 <code>from</code> 伪数组转成数组</li>\n</ol>\n<h5 id=\"RegExp\"><a href=\"#RegExp\" class=\"headerlink\" title=\"RegExp\"></a>RegExp</h5><p><code>RegExp</code> 内置的构造函数，用于创建正则表达式。</p>\n<p>Regular Expression</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 构造函数创建正则</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> reg = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&#x27;\\d&#x27;</span>, <span class=\"string\">&#x27;i&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 字面量方式创建正则</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// let reg = /(\\d)/i;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  reg.<span class=\"title function_\">exec</span>(<span class=\"string\">&#x27;123&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ol>\n<li>推荐使用字面量定义正则表达式，而不是 <code>RegExp</code> 构造函数</li>\n<li><code>RegExp</code> 静态属性 $1、$2、$3、… 获取正则分组单元</li>\n</ol>\n<p>补充：当使用构造函数创建正则时有两种写法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 使用 // 定义正则</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> reg = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"regexp\">/\\d/</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  </span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 或者使用 &#x27;&#x27; 定义正则</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 如果使用引号定义正则时，\\d、\\s、\\w</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    需要多添加一个 \\</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> reg1 = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&#x27;\\\\d&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-包装类型\"><a href=\"#2-2-包装类型\" class=\"headerlink\" title=\"2.2 包装类型\"></a>2.2 包装类型</h4><p>在 JavaScript 中的字符串、数值、布尔具有对象的使用特征，如具有属性和方法，如下代码举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 字符串类型</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;hello world!&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"> \t<span class=\"comment\">// 统计字符的长度（字符数量）</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"property\">length</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  </span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 数值类型</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> price = <span class=\"number\">12.345</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 保留两位小数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  price.<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>之所以具有对象特征的原因是字符串、数值、布尔类型数据是 JavaScript 底层使用 Object 构造函数“包装”来的，被称为包装类型。</p>\n<h5 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h5><p><code>String</code> 是内置的构造函数，用于创建字符串。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 使用构造函数创建字符串</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> str = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&#x27;hello world!&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 字面量创建字符串</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> str2 = <span class=\"string\">&#x27;你好，世界！&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 检测是否属于同一个构造函数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"property\">constructor</span> === str2.<span class=\"property\">constructor</span>); <span class=\"comment\">// true</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str <span class=\"keyword\">instanceof</span> <span class=\"title class_\">String</span>); <span class=\"comment\">// false</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ol>\n<li>推荐使用字面量方式声明字符串，而不是 <code>String</code> 构造函数</li>\n<li>实例属性 <code>length</code> 用来获取字符串的度长</li>\n<li>实例方法 <code>split</code> 用来将字符串拆分成数组</li>\n<li>实例方法 <code>toUpperCase</code> 用于将字母转换成大写</li>\n<li>实例方法 <code>toLowerCase</code> 用于将字母转换成小写</li>\n<li>实例方法 <code>slice</code> 用于字符串截取</li>\n<li>实例方法 <code>indexOf</code>  检测是否包含某字符</li>\n<li>实例方法 <code>startsWith</code> 检测是否以某字符开头</li>\n<li>实例方法 <code>endsWith</code> 检测是否以某字符结尾</li>\n<li>实例方法 <code>replace</code> 用于替换字符串，支持正则匹配</li>\n<li>实例方法  <code>padStart</code> 固定长度字符开始位置打补丁</li>\n<li>实例方法  <code>padEnd</code> 固定长度字符结束位置打补丁</li>\n<li>实例方法 <code>match</code> 用于查找字符串，支持正则匹配</li>\n</ol>\n<p>注：String 也可以当做普通函数使用，这时它的作用是强制转换成字符串数据类型。</p>\n<h5 id=\"Number\"><a href=\"#Number\" class=\"headerlink\" title=\"Number\"></a>Number</h5><p><code>Number</code> 是内置的构造函数，用于创建数值。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 使用构造函数创建数值</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> x = <span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>(<span class=\"string\">&#x27;10&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> y = <span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>(<span class=\"number\">5</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 字面量创建数值</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> z = <span class=\"number\">20</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 检测是否属于同一个构造函数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x.<span class=\"property\">constructor</span> === z.<span class=\"property\">constructor</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ol>\n<li>推荐使用字面量方式声明数值，而不是 <code>Number</code> 构造函数</li>\n<li>实例方法 <code>toFixed</code> 用于设置保留小数位的长度</li>\n</ol>\n<p>注：Number 也可以当做普通函数使用，这时它的作用是强制转换成数值数据类型。</p>\n<h5 id=\"Boolean\"><a href=\"#Boolean\" class=\"headerlink\" title=\"Boolean\"></a>Boolean</h5><p><code>Boolean</code> 是内置的构造函数，用于创建布尔值。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 使用构造函数创建布尔类型</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> locked = <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"string\">&#x27;10&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 字面量创建布尔类型</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> flag = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 检测是否属于同一个构造函数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(locked.<span class=\"property\">constructor</span> === flag.<span class=\"property\">constructor</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ol>\n<li>推荐使用字面量方式声明布尔值，而不是 <code>Boolean</code> 构造函数</li>\n</ol>\n<p>注：Boolean 也可以当做普通函数使用，这时它的作用是强制转换成布尔类型数据，由其它数据类型转换成布尔类型的数据被称为真值（truly）或假值（falsly）。</p>\n<h4 id=\"2-3-写在最后\"><a href=\"#2-3-写在最后\" class=\"headerlink\" title=\"2.3 写在最后\"></a>2.3 写在最后</h4><p>至此对 JavaScript 有了更深的理解，即 JavaScript 中一切皆为对象，还有以前学习的 window、Math 对象，最后补充一点无论是引用类型或是包装包类型都包含两个公共的方法 <code>toString</code> 和 <code>valueOf</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 对象类型数据</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> user = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;小明&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 数值类型\t </span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> num = <span class=\"number\">12.345</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 字符串类型</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;hello world!&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  </span></span><br><span class=\"line\"><span class=\"language-javascript\">  str.<span class=\"title function_\">valueOf</span>(); <span class=\"comment\">// 原始值</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  user.<span class=\"title function_\">toString</span>(); <span class=\"comment\">// 表示该对象的字符串</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>总计：</p>\n<ol>\n<li><code>valueOf</code> 方法获取原始值，数据内部运算的基础，很少主动调用该方法</li>\n<li><code>toString</code> 方法以字符串形式表示对象</li>\n</ol>\n<h2 id=\"扩展：数组filter、map、如reduce\"><a href=\"#扩展：数组filter、map、如reduce\" class=\"headerlink\" title=\"扩展：数组filter、map、如reduce\"></a>扩展：数组filter、map、如reduce</h2><h3 id=\"含义\"><a href=\"#含义\" class=\"headerlink\" title=\"含义\"></a>含义</h3><h4 id=\"Filter\"><a href=\"#Filter\" class=\"headerlink\" title=\"Filter\"></a>Filter</h4><p>你想将一个数组做一个过滤，按照某规则提取出一些特定的项来。结果也生成了一个新数组，但新数组的长度小于或等于原数组。</p>\n<h4 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h4><p>你想将一个数组中的每一项做个转换，结果生成了一个新数组，并且新数组的长度和原数组一致。</p>\n<h4 id=\"Reduce\"><a href=\"#Reduce\" class=\"headerlink\" title=\"Reduce\"></a>Reduce</h4><p>你想通过遍历一个数组的每一项来计算出一个新东西，最后生成的结果可以是任何类型的变量：一个新数组，一个新对象，一个新布尔值…</p>\n<h4 id=\"共同点\"><a href=\"#共同点\" class=\"headerlink\" title=\"共同点\"></a>共同点</h4><p><code>filter</code>、<code>map</code>和<code>reduce</code>共同点就是并不会对原数组做任何改动，结果都是生成一个新变量。让我们来看一些例子：</p>\n<h3 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h3><h4 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- filter: </span></span><br><span class=\"line\"><span class=\"comment\">    你想将一个数组做一个过滤，按照某规则提取出一些特定的项来。</span></span><br><span class=\"line\"><span class=\"comment\">    结果也生成了一个新数组，但新数组的长度小于或等于原数组。 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 现在我们有一个对象列表，其中每个对象代表的是一种变形金刚</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> transformers = [</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Optimus Prime&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">form</span>: <span class=\"string\">&#x27;Freightliner Truck&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">team</span>: <span class=\"string\">&#x27;Autobot&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Megatron&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">form</span>: <span class=\"string\">&#x27;Gun&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">team</span>: <span class=\"string\">&#x27;Decepticon&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Bumblebee&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">form</span>: <span class=\"string\">&#x27;VW Beetle&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">team</span>: <span class=\"string\">&#x27;Autobot&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Soundwave&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">form</span>: <span class=\"string\">&#x27;Walkman&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">team</span>: <span class=\"string\">&#x27;Decepticon&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        ];</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// filter语法</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//  callback将数组元素当参数传入，并返回一个布尔值。</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 当返回值为真时，该元素被加入新数组中，反之则被过滤掉。</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// Array.prototype.filter(callback(item));</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 现在我们把这些变形金刚过滤出汽车人(Autobots)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 方法一：箭头函数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> autobots = transformers.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item.<span class=\"property\">team</span> === <span class=\"string\">&#x27;Autobot&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;方法一：箭头函数 autobots&#x27;</span>, autobots);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 方法二：匿名函数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> autobots = transformers.<span class=\"title function_\">filter</span>(<span class=\"keyword\">function</span> (<span class=\"params\">item</span>)  &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> item.<span class=\"property\">team</span> === <span class=\"string\">&#x27;Autobot&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;方法二：匿名函数 autobots&#x27;</span>, autobots);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 方法三：命名函数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">function</span> <span class=\"title function_\">isAutobot</span>(<span class=\"params\">transformer</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> transformer.<span class=\"property\">team</span> === <span class=\"string\">&#x27;Autobot&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> autobots = transformers.<span class=\"title function_\">filter</span>(isAutobot);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;方法三：命名函数 autobots&#x27;</span>, autobots);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- map: </span></span><br><span class=\"line\"><span class=\"comment\">    你想将一个数组中的每一项做个转换，</span></span><br><span class=\"line\"><span class=\"comment\">    结果生成了一个新数组，并且新数组的长度和原数组一致。 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 现在我们有一个对象列表，其中每个对象代表的是一种变形金刚</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> transformers = [</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Optimus Prime&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">form</span>: <span class=\"string\">&#x27;Freightliner Truck&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">team</span>: <span class=\"string\">&#x27;Autobot&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Megatron&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">form</span>: <span class=\"string\">&#x27;Gun&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">team</span>: <span class=\"string\">&#x27;Decepticon&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Bumblebee&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">form</span>: <span class=\"string\">&#x27;VW Beetle&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">team</span>: <span class=\"string\">&#x27;Autobot&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Soundwave&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">form</span>: <span class=\"string\">&#x27;Walkman&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">team</span>: <span class=\"string\">&#x27;Decepticon&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        ];</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 如果想得到一个包含所有变形（form）的列表该怎么做呢？</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// map使用语法：\t</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// Array.prototype.map(callback(item));</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// callback会遍历数组的每个元素，在其中返回的每一个数值将会组成新数组。</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 方法一：箭头函数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> robotsInDisguise1 = transformers.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item.<span class=\"property\">form</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;方法一：箭头函数 &#x27;</span>, robotsInDisguise1);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 方法二：匿名函数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> robotsInDisguise2 = transformers.<span class=\"title function_\">map</span>(<span class=\"keyword\">function</span> (<span class=\"params\">transformer</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> transformer.<span class=\"property\">form</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;方法二：匿名函数 &#x27;</span>, robotsInDisguise2);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 方法三：命名函数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">function</span> <span class=\"title function_\">getForm</span>(<span class=\"params\">transformer</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> transformer.<span class=\"property\">form</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> robotsInDisguise3 = transformers.<span class=\"title function_\">map</span>(getForm);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;方法三：命名函数 &#x27;</span>, robotsInDisguise3);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- filter: </span></span><br><span class=\"line\"><span class=\"comment\">    你想通过遍历一个数组的每一项来计算出一个新东西，</span></span><br><span class=\"line\"><span class=\"comment\">    最后生成的结果可以是任何类型的变量：</span></span><br><span class=\"line\"><span class=\"comment\">    一个新数组，一个新对象，一个新布尔值… --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 现在我们有一个对象列表，其中每个对象代表的是一种变形金刚</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> constructicons = [</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Scrapper&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">form</span>: <span class=\"string\">&#x27;Freightliner Truck&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">team</span>: <span class=\"string\">&#x27;Decepticon&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">bodyPart</span>: <span class=\"string\">&#x27;rightLeg&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Hook&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">form</span>: <span class=\"string\">&#x27;Mobile Crane&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">team</span>: <span class=\"string\">&#x27;Decepticon&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">bodyPart</span>: <span class=\"string\">&#x27;upperTorso&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Bonecrusher&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">form</span>: <span class=\"string\">&#x27;Bulldozer&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">team</span>: <span class=\"string\">&#x27;Decepticon&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">bodyPart</span>: <span class=\"string\">&#x27;leftArm&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Scavenger&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">form</span>: <span class=\"string\">&#x27;Excavator&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">team</span>: <span class=\"string\">&#x27;Decepticon&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">bodyPart</span>: <span class=\"string\">&#x27;rightArm&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Mixmaster&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">form</span>: <span class=\"string\">&#x27;Concrete Mixer&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">team</span>: <span class=\"string\">&#x27;Decepticon&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">bodyPart</span>: <span class=\"string\">&#x27;leftLeg&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Long Haul&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">form</span>: <span class=\"string\">&#x27;Dump Truck&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">team</span>: <span class=\"string\">&#x27;Decepticon&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">bodyPart</span>: <span class=\"string\">&#x27;lowerTorso&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        ];</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//         Array.reduce()是通过遍历每个数组元素对其做运算，</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//         因此，也是三个API之间最富有技巧的，其使用语法也略显复杂：</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// Array.prototype.reduce(callback(previousValue, currentValue[, index], array]), initialValue)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// educe的callback需要至少两个参数。第一个是从上次遍历中返回的一个值，第二个是当前数组遍历到的一个值</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// ，返回值又将当做第一个参数被传入到下一次遍历。</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 组合变形金刚</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">function</span> <span class=\"title function_\">assemble</span>(<span class=\"params\">combiner, transformer</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">//每次遍历都会将当前的变形金刚（transformer）的名字加入到组合器（combiner）的form中去。</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            combiner.<span class=\"property\">form</span>[transformer.<span class=\"property\">bodyPart</span>] = transformer.<span class=\"property\">name</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// bodyPart:name</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> combiner;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> devastator = constructicons.<span class=\"title function_\">reduce</span>(assemble, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Devastator&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">team</span>: <span class=\"string\">&#x27;Decepticon&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">form</span>: &#123;&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;reduce&#x27;</span>, devastator);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">/*</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">            devastator == &#123;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">            name: ‘Devastator’,</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">            team: ‘Decepticon’,</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">            form: &#123;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">                leftArm: &quot;Bonecrusher&quot;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">                leftLeg: &quot;Mixmaster&quot;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">                lowerTorso: &quot;Long Haul&quot;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">                rightArm: &quot;Scavenger&quot;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">                rightLeg: &quot;Scrapper&quot;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">                upperTorso: &quot;Hook&quot;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">        &#125;        </span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">*/</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","categories":["前端面试"],"tags":["JavaScript","构造函数","基本数据类型","基本引用类型","对象","数组","filter","map","reduce"]},{"title":"JavaScript基础语法","url":"/2022/06/23/JavaScript%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本片文章主要记录本人在学习过程中容易混淆或者难以记住的概念和用法。</p>\n<h2 id=\"let和var的区别\"><a href=\"#let和var的区别\" class=\"headerlink\" title=\"let和var的区别\"></a>let和var的区别</h2><h2 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h2><h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h2>","categories":["前端开发"],"tags":["JavaScript"]},{"title":"excel导入功能 - 导入学校基本信息","url":"/2022/07/26/excel%E5%AF%BC%E5%85%A5%E5%8A%9F%E8%83%BD-%E5%AF%BC%E5%85%A5%E5%AD%A6%E6%A0%A1%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF/","content":"<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1 前言\"></a>1 前言</h2><p>需求是给一张excel表格，提供学校的基本信息，将其批量导入后端数据库中</p>\n<p>表头如下：</p>\n<img src=\"/2022/07/26/excel%E5%AF%BC%E5%85%A5%E5%8A%9F%E8%83%BD-%E5%AF%BC%E5%85%A5%E5%AD%A6%E6%A0%A1%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF/image-20220726101114066.png\" class=\"\" title=\"image-20220726101114066\">\n\n<h2 id=\"2-封装excel导入组件\"><a href=\"#2-封装excel导入组件\" class=\"headerlink\" title=\"2 封装excel导入组件\"></a>2 封装excel导入组件</h2><h3 id=\"2-1-安装xlsx包\"><a href=\"#2-1-安装xlsx包\" class=\"headerlink\" title=\"2.1 安装xlsx包\"></a>2.1 安装xlsx包</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm i xlsx@0.16.8</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-创建excel组件和样式-components-x2F-UploadExcel-x2F-index-vue\"><a href=\"#2-2-创建excel组件和样式-components-x2F-UploadExcel-x2F-index-vue\" class=\"headerlink\" title=\"2.2 创建excel组件和样式(components&#x2F;UploadExcel&#x2F;index.vue)\"></a>2.2 创建excel组件和样式(components&#x2F;UploadExcel&#x2F;index.vue)</h3><img src=\"/2022/07/26/excel%E5%AF%BC%E5%85%A5%E5%8A%9F%E8%83%BD-%E5%AF%BC%E5%85%A5%E5%AD%A6%E6%A0%A1%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF/image-20220726101922096.png\" class=\"\" title=\"image-20220726101922096\">\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;upload-excel&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;btn-upload&quot;&gt;</span><br><span class=\"line\">      &lt;el-button</span><br><span class=\"line\">        :loading=&quot;loading&quot;</span><br><span class=\"line\">        size=&quot;mini&quot;</span><br><span class=\"line\">        type=&quot;primary&quot;</span><br><span class=\"line\">        @click=&quot;handleUpload&quot;</span><br><span class=\"line\">      &gt;</span><br><span class=\"line\">        点击上传</span><br><span class=\"line\">      &lt;/el-button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;input</span><br><span class=\"line\">      ref=&quot;excel-upload-input&quot;</span><br><span class=\"line\">      class=&quot;excel-upload-input&quot;</span><br><span class=\"line\">      type=&quot;file&quot;</span><br><span class=\"line\">      accept=&quot;.xlsx, .xls&quot;</span><br><span class=\"line\">      @change=&quot;handleClick&quot;</span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">    &lt;div</span><br><span class=\"line\">      class=&quot;drop&quot;</span><br><span class=\"line\">      @drop=&quot;handleDrop&quot;</span><br><span class=\"line\">      @dragover=&quot;handleDragover&quot;</span><br><span class=\"line\">      @dragenter=&quot;handleDragover&quot;</span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">      &lt;i class=&quot;el-icon-upload&quot; /&gt;</span><br><span class=\"line\">      &lt;span&gt;将文件拖到此处&lt;/span&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import XLSX from &#x27;xlsx&#x27;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    beforeUpload: Function, // eslint-disable-line</span><br><span class=\"line\">    onSuccess: Function // eslint-disable-line</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      loading: false,</span><br><span class=\"line\">      excelData: &#123;</span><br><span class=\"line\">        header: null,</span><br><span class=\"line\">        results: null</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    generateData(&#123; header, results &#125;) &#123;</span><br><span class=\"line\">      this.excelData.header = header</span><br><span class=\"line\">      this.excelData.results = results</span><br><span class=\"line\">      this.onSuccess &amp;&amp; this.onSuccess(this.excelData)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    handleDrop(e) &#123;</span><br><span class=\"line\">      e.stopPropagation()</span><br><span class=\"line\">      e.preventDefault()</span><br><span class=\"line\">      if (this.loading) return</span><br><span class=\"line\">      const files = e.dataTransfer.files</span><br><span class=\"line\">      if (files.length !== 1) &#123;</span><br><span class=\"line\">        this.$message.error(&#x27;Only support uploading one file!&#x27;)</span><br><span class=\"line\">        return</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      const rawFile = files[0] // only use files[0]</span><br><span class=\"line\">      if (!this.isExcel(rawFile)) &#123;</span><br><span class=\"line\">        this.$message.error(</span><br><span class=\"line\">          &#x27;Only supports upload .xlsx, .xls, .csv suffix files&#x27;</span><br><span class=\"line\">        )</span><br><span class=\"line\">        return false</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      this.upload(rawFile)</span><br><span class=\"line\">      e.stopPropagation()</span><br><span class=\"line\">      e.preventDefault()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    handleDragover(e) &#123;</span><br><span class=\"line\">      e.stopPropagation()</span><br><span class=\"line\">      e.preventDefault()</span><br><span class=\"line\">      e.dataTransfer.dropEffect = &#x27;copy&#x27;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    handleUpload() &#123;</span><br><span class=\"line\">      this.$refs[&#x27;excel-upload-input&#x27;].click()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    handleClick(e) &#123;</span><br><span class=\"line\">      const files = e.target.files</span><br><span class=\"line\">      const rawFile = files[0] // only use files[0]</span><br><span class=\"line\">      if (!rawFile) return</span><br><span class=\"line\">      this.upload(rawFile)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    upload(rawFile) &#123;</span><br><span class=\"line\">      this.$refs[&#x27;excel-upload-input&#x27;].value = null // fix can&#x27;t select the same excel</span><br><span class=\"line\">      if (!this.beforeUpload) &#123;</span><br><span class=\"line\">        this.readerData(rawFile)</span><br><span class=\"line\">        return</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      const before = this.beforeUpload(rawFile)</span><br><span class=\"line\">      if (before) &#123;</span><br><span class=\"line\">        this.readerData(rawFile)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    readerData(rawFile) &#123;</span><br><span class=\"line\">      this.loading = true</span><br><span class=\"line\">      return new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">        const reader = new FileReader()</span><br><span class=\"line\">        reader.onload = (e) =&gt; &#123;</span><br><span class=\"line\">          const data = e.target.result</span><br><span class=\"line\">          const workbook = XLSX.read(data, &#123; type: &#x27;array&#x27; &#125;)</span><br><span class=\"line\">          const firstSheetName = workbook.SheetNames[0]</span><br><span class=\"line\">          const worksheet = workbook.Sheets[firstSheetName]</span><br><span class=\"line\">          const header = this.getHeaderRow(worksheet)</span><br><span class=\"line\">          const results = XLSX.utils.sheet_to_json(worksheet)</span><br><span class=\"line\">          this.generateData(&#123; header, results &#125;)</span><br><span class=\"line\">          this.loading = false</span><br><span class=\"line\">          resolve()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        reader.readAsArrayBuffer(rawFile)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getHeaderRow(sheet) &#123;</span><br><span class=\"line\">      const headers = []</span><br><span class=\"line\">      const range = XLSX.utils.decode_range(sheet[&#x27;!ref&#x27;])</span><br><span class=\"line\">      let C</span><br><span class=\"line\">      const R = range.s.r</span><br><span class=\"line\">      /* start in the first row */</span><br><span class=\"line\">      for (C = range.s.c; C &lt;= range.e.c; ++C) &#123;</span><br><span class=\"line\">        /* walk every column in the range */</span><br><span class=\"line\">        const cell = sheet[XLSX.utils.encode_cell(&#123; c: C, r: R &#125;)]</span><br><span class=\"line\">        /* find the cell in the first row */</span><br><span class=\"line\">        let hdr = &#x27;UNKNOWN &#x27; + C // &lt;-- replace with your desired default</span><br><span class=\"line\">        if (cell &amp;&amp; cell.t) hdr = XLSX.utils.format_cell(cell)</span><br><span class=\"line\">        headers.push(hdr)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return headers</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    isExcel(file) &#123;</span><br><span class=\"line\">      return /\\.(xlsx|xls|csv)$/.test(file.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class=\"line\">.upload-excel &#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  justify-content: center;</span><br><span class=\"line\">  margin-top: 100px;</span><br><span class=\"line\">  .excel-upload-input &#123;</span><br><span class=\"line\">    display: none;</span><br><span class=\"line\">    z-index: -9999;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .btn-upload,</span><br><span class=\"line\">  .drop &#123;</span><br><span class=\"line\">    border: 1px dashed #bbb;</span><br><span class=\"line\">    width: 350px;</span><br><span class=\"line\">    height: 160px;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">    line-height: 160px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .drop &#123;</span><br><span class=\"line\">    line-height: 80px;</span><br><span class=\"line\">    color: #bbb;</span><br><span class=\"line\">    i &#123;</span><br><span class=\"line\">      font-size: 60px;</span><br><span class=\"line\">      display: block;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-注册全局的导入excel组件-components-x2F-index-js\"><a href=\"#2-3-注册全局的导入excel组件-components-x2F-index-js\" class=\"headerlink\" title=\"2.3 注册全局的导入excel组件 (components&#x2F;index.js)\"></a>2.3 注册全局的导入excel组件 (components&#x2F;index.js)</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">PageTools</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./PageTools&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">UploadExcel</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./UploadExcel&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">install</span>(<span class=\"params\">Vue</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Vue</span>.<span class=\"title function_\">component</span>(<span class=\"string\">&#x27;PageTools&#x27;</span>, <span class=\"title class_\">PageTools</span>) <span class=\"comment\">// 注册工具栏组件</span></span><br><span class=\"line\">    <span class=\"title class_\">Vue</span>.<span class=\"title function_\">component</span>(<span class=\"string\">&#x27;UploadExcel&#x27;</span>, <span class=\"title class_\">UploadExcel</span>) <span class=\"comment\">// 注册导入excel组件</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-excel导入步骤\"><a href=\"#3-excel导入步骤\" class=\"headerlink\" title=\"3 excel导入步骤\"></a>3 excel导入步骤</h2><h3 id=\"3-1-建立公共导入的页面路由-（router-x2F-index-js）\"><a href=\"#3-1-建立公共导入的页面路由-（router-x2F-index-js）\" class=\"headerlink\" title=\"3.1 建立公共导入的页面路由 （router&#x2F;index.js）\"></a>3.1 建立公共导入的页面路由 （router&#x2F;index.js）</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// excel导入的路由</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/import&#x27;</span>,</span><br><span class=\"line\">   <span class=\"attr\">component</span>: <span class=\"title class_\">Layout</span>,</span><br><span class=\"line\">   <span class=\"attr\">hidden</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 在左侧栏中隐藏</span></span><br><span class=\"line\">   <span class=\"attr\">children</span>: [&#123;</span><br><span class=\"line\">     <span class=\"attr\">path</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">     <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"title function_\">import</span>(<span class=\"string\">&#x27;@/views/import&#x27;</span>),</span><br><span class=\"line\">     <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Import&#x27;</span>,</span><br><span class=\"line\">     <span class=\"attr\">meta</span>: &#123;</span><br><span class=\"line\">       <span class=\"attr\">title</span>: <span class=\"string\">&#x27;文件导入&#x27;</span> <span class=\"comment\">// 左侧导航会读取我们的路由里的meta里面的title作为显示菜单名称</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;]</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-创建import路由组件-src-views-import-index-vue\"><a href=\"#3-2-创建import路由组件-src-views-import-index-vue\" class=\"headerlink\" title=\"3.2 创建import路由组件  src/views/import/index.vue\"></a>3.2 创建import路由组件  <strong><code>src/views/import/index.vue</code></strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;!-- 公共导入组件 --&gt; </span><br><span class=\"line\">  &lt;upload-excel :on-success=&quot;success&quot; /&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-封装批量导入接口-api-x2F-schools-js\"><a href=\"#3-3-封装批量导入接口-api-x2F-schools-js\" class=\"headerlink\" title=\"3.3 封装批量导入接口 api&#x2F;schools.js\"></a>3.3 封装批量导入接口 api&#x2F;schools.js</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 批量新增学校信息</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">importSchoolInfo</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/school/addBatch&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">    data</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4-实现excel导入\"><a href=\"#3-4-实现excel导入\" class=\"headerlink\" title=\"3.4 实现excel导入\"></a>3.4 实现excel导入</h3><p>使用type类型，区分不同的批量导入请求。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;!-- 引入公共Excel导入组件 --&gt;</span><br><span class=\"line\">  &lt;upload-excel :on-success=&quot;success&quot; /&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import &#123; importSchoolInfo &#125; from &#x27;@/api/school&#x27;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &#x27;Import&#x27;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      // 为了让这个页面可以服务更多的导入功能，我们可以在页面中用参数来判断</span><br><span class=\"line\">      type: this.$route.query.type</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    async success(&#123; header, results &#125;) &#123;</span><br><span class=\"line\">      console.log(&#x27;success type&#x27;, this.$route.query)</span><br><span class=\"line\">      if (this.type === undefined) &#123;</span><br><span class=\"line\">        this.$message.error(&#x27;请关闭当前页面，重新进入&#x27;)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        // 如果是导入员工</span><br><span class=\"line\">        if (this.type === &#x27;schoolBasicInfo&#x27;) &#123;</span><br><span class=\"line\">          const schoolInfoRelations = &#123;</span><br><span class=\"line\">            学校编号: &#x27;school_id&#x27;,</span><br><span class=\"line\">            学校名: &#x27;school_name&#x27;,</span><br><span class=\"line\">            学校等级: &#x27;school_level&#x27;,</span><br><span class=\"line\">            学校类型: &#x27;school_type&#x27;,</span><br><span class=\"line\">            办学性质: &#x27;school_nature&#x27;,</span><br><span class=\"line\">            区域: &#x27;school_region&#x27;,</span><br><span class=\"line\">            省份: &#x27;school_province&#x27;,</span><br><span class=\"line\">            城市: &#x27;school_city&#x27;,</span><br><span class=\"line\">            是否211: &#x27;school_211&#x27;,</span><br><span class=\"line\">            是否985: &#x27;school_985&#x27;,</span><br><span class=\"line\">            隶属单位: &#x27;school_belong&#x27;,</span><br><span class=\"line\">            最新软科排名: &#x27;school_rk&#x27;,</span><br><span class=\"line\">            最新校友会排名: &#x27;school_xyh&#x27;,</span><br><span class=\"line\">            最新武书连排名: &#x27;school_wsl&#x27;,</span><br><span class=\"line\">            最新QS排名: &#x27;school_qs&#x27;,</span><br><span class=\"line\">            最新US排名: &#x27;school_us&#x27;,</span><br><span class=\"line\">            最新泰晤士排名: &#x27;school_tws&#x27;,</span><br><span class=\"line\">            报考要求: &#x27;school_requirments&#x27;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          const arr = []</span><br><span class=\"line\">          results.forEach((item) =&gt; &#123;</span><br><span class=\"line\">            const userInfo = &#123;&#125;</span><br><span class=\"line\">            Object.keys(item).forEach((key) =&gt; &#123;</span><br><span class=\"line\">              userInfo[schoolInfoRelations[key]] = item[key]</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            arr.push(userInfo)</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          const &#123; data &#125; = await importSchoolInfo(arr) // 调用导入接口</span><br><span class=\"line\">          if (data.code === 200) &#123;</span><br><span class=\"line\">            this.$message.success(&#x27;批量新增学校基本信息成功！&#x27;)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          // 跳转回到上一个页面</span><br><span class=\"line\">          this.$router.back()</span><br><span class=\"line\">          // 将信息导入页面从openPages中删除，即关闭导入页面的tagsView</span><br><span class=\"line\">          this.$store.commit(&#x27;tagsView/REMOVE_PAGE&#x27;, &#x27;/import&#x27;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style /&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-5-在学校界面，点击”导入”按钮，实现批量导入。传入type类型\"><a href=\"#3-5-在学校界面，点击”导入”按钮，实现批量导入。传入type类型\" class=\"headerlink\" title=\"3.5 在学校界面，点击”导入”按钮，实现批量导入。传入type类型\"></a>3.5 在学校界面，点击”导入”按钮，实现批量导入。传入type类型</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;el-button type=&quot;warning&quot; @click=&quot;$router.push(&#x27;/import?type=schoolBasicInfo&#x27;)&quot;</span><br><span class=\"line\">&gt;导入&lt;/el-button&gt;</span><br></pre></td></tr></table></figure>\n\n","categories":["项目知识"]},{"title":"el-table动态展示数据","url":"/2022/06/28/el-table%E5%8A%A8%E6%80%81%E5%B1%95%E7%A4%BA%E6%95%B0%E6%8D%AE/","content":""},{"title":"elementui - form表单","url":"/2022/06/27/elementui-form%E8%A1%A8%E5%8D%95/","content":"<p>[TOC]</p>\n<h2 id=\"表单元素\"><a href=\"#表单元素\" class=\"headerlink\" title=\"表单元素\"></a>表单元素</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;el-form&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"数据form对象\"><a href=\"#数据form对象\" class=\"headerlink\" title=\"数据form对象\"></a>数据form对象</h4><p>form: {}</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 表单数据结构</span></span><br><span class=\"line\">    <span class=\"attr\">form</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">school_code</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"comment\">// 学校编号</span></span><br><span class=\"line\">      <span class=\"attr\">school_id</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"comment\">// 学校id</span></span><br><span class=\"line\">      <span class=\"attr\">school_name</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"comment\">// 学校名</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"model-用于表单第一层验证，显示红色-警告语\"><a href=\"#model-用于表单第一层验证，显示红色-警告语\" class=\"headerlink\" title=\":model 用于表单第一层验证，显示红色 警告语\"></a>:model 用于表单第一层验证，显示红色 警告语</h4><p>如果想做表单验证是必须要写的！</p>\n<p>目前el-form的<a href=\"https://so.csdn.net/so/search?q=model&spm=1001.2101.3001.7020\">model</a>属性主要用表单验证的，也就是配合el-form的rules和el-form-item的prop来使用的，如果不写model，然后验证的话，会提示缺少model，导致无法验证成功。</p>\n<p><strong>:model的作用：主要是为了配合表单验证。</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-form</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">style</span>=<span class=\"string\">&quot;overflow-y: auto; height: 485px; margin-top: 10px&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">label-width</span>=<span class=\"string\">&quot;150px&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">:model</span>=<span class=\"string\">&quot;form&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表单数据绑定\"><a href=\"#表单数据绑定\" class=\"headerlink\" title=\"表单数据绑定\"></a>表单数据绑定</h2><p>v-model ： el-form-item内部的每个表单项.即使关闭表单，再次打开时，上次输入的内容仍在。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;el-form-item label=&quot;学校名称&quot;&gt;</span><br><span class=\"line\">  &lt;el-input v-model=&quot;form.school_name&quot; class=&quot;input_box&quot; /&gt;</span><br><span class=\"line\">&lt;/el-form-item&gt;</span><br><span class=\"line\">&lt;el-form-item label=&quot;学校等级&quot;&gt;</span><br><span class=\"line\">  &lt;el-input v-model=&quot;form.school_type&quot; class=&quot;input_box&quot; /&gt;</span><br><span class=\"line\">&lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"表单校验第一步（三剑客）\"><a href=\"#表单校验第一步（三剑客）\" class=\"headerlink\" title=\"表单校验第一步（三剑客）\"></a>表单校验第一步（三剑客）</h2><p>:model : el-form     配合表单校验</p>\n<p>:rules: el-form      指定表单对象和校验规则{}</p>\n<p>props: el-form-item      指定输入框对应哪一个校验规则</p>\n<h4 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;el-form</span><br><span class=\"line\">  style=&quot;overflow-y: auto; height: 485px; margin-top: 10px&quot;</span><br><span class=\"line\">  label-width=&quot;150px&quot;</span><br><span class=\"line\">  :rules=&quot;rules&quot;</span><br><span class=\"line\">  :model=&quot;form&quot;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">  &lt;el-form-item label=&quot;学校编号&quot; prop=&quot;school_code&quot;&gt;</span><br><span class=\"line\">    &lt;el-input v-model=&quot;form.school_code&quot; class=&quot;input_box&quot; /&gt;</span><br><span class=\"line\">  &lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 表单验证</span></span><br><span class=\"line\"><span class=\"attr\">rules</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">school_code</span>: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">required</span>: <span class=\"literal\">true</span>, <span class=\"attr\">message</span>: <span class=\"string\">&#x27;请输入学校编号&#x27;</span>, <span class=\"attr\">trigger</span>: <span class=\"string\">&#x27;blur&#x27;</span> &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>问题：只使用验证三剑客是无法对未验证通过的内容进行提交拦截的。也就是说，验证三剑客只不过是在为满足表单验证要求时，在页面显示红色警示语，只要点击了提交按钮，仍然会进行提交表单。并没有实现完整的表单验证过程。</p>\n<p>解决：验证不通过拒绝提交请求。</p>\n<h2 id=\"表单校验第二步-validate\"><a href=\"#表单校验第二步-validate\" class=\"headerlink\" title=\"表单校验第二步 validate()\"></a>表单校验第二步 validate()</h2><p>ref获取el-form对象，调用el-form对象的validate方法进行拦截，如果验证成功则执行后面的提交请求代码，验证失败则不提交请求，并且弹出警告信息。即验证失败后代码不会往下执行。</p>\n<p>1 定义el-form对象的ref名称</p>\n<p>获得dom对象，此处用于获得表单el-form对象，为了调用el-form的validate验证方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;el-form</span><br><span class=\"line\">  ref=&quot;form&quot;</span><br><span class=\"line\">  style=&quot;overflow-y: auto; height: 485px; margin-top: 10px&quot;</span><br><span class=\"line\">  label-width=&quot;150px&quot;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n\n<p>2 通过ref获取对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">this.$refs.form</span><br></pre></td></tr></table></figure>\n\n<p>3 调用el-form的validate方法</p>\n<p>有两种使用validate的方法</p>\n<p>方法一：官网（传入回调函数）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">onSave</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">form</span>.<span class=\"title function_\">validate</span>(<span class=\"function\">(<span class=\"params\">valid</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (valid) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;submit&#x27;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;submit error&#x27;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"comment\">// 表单校验不通过，不继续往下执行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">form</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法二：</p>\n<img src=\"/2022/06/27/elementui-form%E8%A1%A8%E5%8D%95/image-20220627193812361.png\" class=\"\" title=\"image-20220627193812361\">\n\n<p>针对”若不传入回调函数，则会返回一个 promise”，使用async await</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"title function_\">onSave</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">form</span>.<span class=\"title function_\">validate</span>()</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(error)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["elementui"]},{"title":"Hello World","url":"/2022/07/28/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"hexo常用命令","url":"/2022/06/22/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>方便查阅，将本人常用指令汇总</p>\n<h2 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h2><p>由于设置了github多设备同步博客，因此在使用博客之前需要进行拉取同步</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n<p>新建文章</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo n &quot;文章名&quot;</span><br></pre></td></tr></table></figure>\n\n<p>文章上传服务器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 清除缓存&amp;&amp;生成静态网页&amp;&amp;将本地数据部署到服务器</span><br><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>","categories":["技巧小知识"],"tags":["hexo"]},{"title":"mytext","url":"/2022/06/14/mytext/","content":"<img src=\"/2022/06/14/mytext/image-20220614173821555.png\" class=\"\" title=\"image-20220614173821555\">\n\n\n\n\n\n\n\n\n\n\n\n<p>a</p>\n<p>撒打啊三大asdd</p>\n"},{"title":"vuex基础 - store、state、mutations、actions、局部作用域","url":"/2022/07/27/vuex%E5%9F%BA%E7%A1%80-store%E3%80%81state%E3%80%81mutations%E3%80%81actions%E3%80%81%E5%B1%80%E9%83%A8%E4%BD%9C%E7%94%A8%E5%9F%9F/","content":"<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><ol>\n<li>修改state状态必须通过**<code>mutations</code>**</li>\n<li>**<code>mutations</code>**只能执行同步代码，类似ajax，定时器之类的代码不能在mutations中执行</li>\n<li>执行异步代码，要通过**<code>actions</code>**，然后将数据提交给mutations才可以完成数据更新</li>\n<li>state的状态即共享数据可以在组件中引用</li>\n<li>组件中可以调用 state 、mutations、 actions</li>\n</ol>\n<h2 id=\"vuex初始化\"><a href=\"#vuex初始化\" class=\"headerlink\" title=\"vuex初始化\"></a>vuex初始化</h2><ol>\n<li><p>创建vue demo</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">vue create  demo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装到**<code>运行时依赖</code>**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i vuex --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在main.js中注册vuex</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vuex</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(vuex)</span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;&#125;)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  store</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"state\"><a href=\"#state\" class=\"headerlink\" title=\"state\"></a>state</h2><h3 id=\"定义state\"><a href=\"#定义state\" class=\"headerlink\" title=\"定义state\"></a><strong>定义state</strong></h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化vuex对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 管理数据</span></span><br><span class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在组件中获取state\"><a href=\"#在组件中获取state\" class=\"headerlink\" title=\"在组件中获取state\"></a>在组件中获取state</h3><h4 id=\"插值表达式-store-state\"><a href=\"#插值表达式-store-state\" class=\"headerlink\" title=\"插值表达式 $store.state\"></a>插值表达式 $store.state</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt; state的数据：&#123;&#123; $store.state.count &#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 把state中数据，定义在组件内的计算属性中</span></span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    count () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> &lt;div&gt; state的数据：&#123;&#123; count &#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"辅助函数-mapState\"><a href=\"#辅助函数-mapState\" class=\"headerlink\" title=\"辅助函数 - mapState\"></a>辅助函数 - mapState</h4><p>第一步：导入mapState</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &#123; mapState &#125; from &#x27;vuex&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>第二步：采用数组形式引入state属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">mapState</span>([<span class=\"string\">&#x27;count&#x27;</span>]) </span><br></pre></td></tr></table></figure>\n\n<p>第三步：利用<strong>延展运算符</strong>将导出的状态映射给计算属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">  ...<span class=\"title function_\">mapState</span>([<span class=\"string\">&#x27;count&#x27;</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt; state的数据：&#123;&#123; count &#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"mutations\"><a href=\"#mutations\" class=\"headerlink\" title=\"mutations\"></a>mutations</h2><h4 id=\"定义mutations\"><a href=\"#定义mutations\" class=\"headerlink\" title=\"定义mutations\"></a>定义mutations</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store  = <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 定义mutations</span></span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 方法里参数 第一个参数是当前store的state属性</span></span><br><span class=\"line\">    <span class=\"comment\">// payload 载荷 运输参数 调用mutaiions的时候 可以传递参数 传递载荷</span></span><br><span class=\"line\">    addCount (state, payload) &#123;</span><br><span class=\"line\">        state.<span class=\"property\">count</span> += payload</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    addCount2 (state) &#123;</span><br><span class=\"line\">        state.<span class=\"property\">count</span> += <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在组件中调用mutations\"><a href=\"#在组件中调用mutations\" class=\"headerlink\" title=\"在组件中调用mutations\"></a>在组件中调用mutations</h3><h4 id=\"原始形式-store-commit\"><a href=\"#原始形式-store-commit\" class=\"headerlink\" title=\"原始形式-$store.commit\"></a><strong>原始形式</strong>-$store.commit</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;button @click=&quot;addCount&quot;&gt;+1&lt;/button&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">    //   调用方法</span><br><span class=\"line\">      addCount () &#123;</span><br><span class=\"line\">         // 调用store中的mutations 提交给muations</span><br><span class=\"line\">        // commit(&#x27;muations名称&#x27;, 2)</span><br><span class=\"line\">        this.$store.commit(&#x27;addCount&#x27;, 10)  // 直接调用mutations</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"辅助函数-mapMutations\"><a href=\"#辅助函数-mapMutations\" class=\"headerlink\" title=\"辅助函数 - mapMutations\"></a><strong>辅助函数</strong> - mapMutations</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import  &#123; mapMutations &#125; from &#x27;vuex&#x27;</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    ...mapMutations([&#x27;addCount&#x27;])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;button @click=&quot;addCount(100)&quot;&gt;+100&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"actions\"><a href=\"#actions\" class=\"headerlink\" title=\"actions\"></a>actions</h2><h3 id=\"定义actions\"><a href=\"#定义actions\" class=\"headerlink\" title=\"定义actions\"></a>定义actions</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\"> <span class=\"comment\">//  获取异步的数据 context表示当前的store的实例 可以通过 context.state 获取状态 也可以通过context.commit 来提交mutations， 也可以 context.diapatch调用其他的action</span></span><br><span class=\"line\">   getAsyncCount (context) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">       <span class=\"comment\">// 一秒钟之后 要给一个数 去修改state</span></span><br><span class=\"line\">       context.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;addCount&#x27;</span>, <span class=\"number\">123</span>)</span><br><span class=\"line\">     &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"comment\">// 带参数</span></span><br><span class=\"line\">   getAsyncCount2 (context, payload) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">       <span class=\"comment\">// 一秒钟之后 要给一个数 去修改state</span></span><br><span class=\"line\">       context.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;addCount&#x27;</span>, payload)</span><br><span class=\"line\">     &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在组件中调用actions\"><a href=\"#在组件中调用actions\" class=\"headerlink\" title=\"在组件中调用actions\"></a>在组件中调用actions</h3><h4 id=\"原始调用-store-dispatch-‘actionName’-params\"><a href=\"#原始调用-store-dispatch-‘actionName’-params\" class=\"headerlink\" title=\"原始调用 - $store.dispatch(‘actionName’, params)\"></a><strong>原始调用</strong> - $store.dispatch(‘actionName’, params)</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 无参数调用</span></span><br><span class=\"line\"> addAsyncCount () &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">dispatch</span>(<span class=\"string\">&#x27;getAsyncCount&#x27;</span>)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"comment\">// 参数调用</span></span><br><span class=\"line\"> addAsyncCount () &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">dispatch</span>(<span class=\"string\">&#x27;getAsyncCount&#x27;</span>, <span class=\"number\">123</span>)</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"辅助函数-mapActions\"><a href=\"#辅助函数-mapActions\" class=\"headerlink\" title=\"辅助函数 - mapActions([])\"></a>辅助函数 - mapActions([])</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &#123; mapActions &#125; from &#x27;vuex&#x27;</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    ...mapActions([&#x27;getAsyncCount&#x27;])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 调用</span><br><span class=\"line\">&lt;button @click=&quot;getAsyncCount(111)&quot;&gt;+异步&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"getters\"><a href=\"#getters\" class=\"headerlink\" title=\"getters\"></a>getters</h2><h3 id=\"定义getters\"><a href=\"#定义getters\" class=\"headerlink\" title=\"定义getters\"></a>定义getters</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">getters</span>: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// getters函数的第一个参数是 state</span></span><br><span class=\"line\">  <span class=\"comment\">// 必须要有返回值</span></span><br><span class=\"line\">   <span class=\"attr\">filterList</span>:  <span class=\"function\"><span class=\"params\">state</span> =&gt;</span>  state.<span class=\"property\">list</span>.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item &gt; <span class=\"number\">5</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在组件中使用getters\"><a href=\"#在组件中使用getters\" class=\"headerlink\" title=\"在组件中使用getters\"></a>在组件中使用getters</h3><h4 id=\"原始方式-store-getters\"><a href=\"#原始方式-store-getters\" class=\"headerlink\" title=\"原始方式 - $store.getters\"></a>原始方式 - $store.getters</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;&#123;&#123; $store.getters.filterList &#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"辅助函数-mapGetters\"><a href=\"#辅助函数-mapGetters\" class=\"headerlink\" title=\"辅助函数 - mapGetters([])\"></a><strong>辅助函数</strong> - mapGetters([])</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">    ...mapGetters([&#x27;filterList&#x27;])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> &lt;div&gt;&#123;&#123; filterList &#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Vuex-模块化\"><a href=\"#Vuex-模块化\" class=\"headerlink\" title=\"Vuex - 模块化\"></a>Vuex - 模块化</h2><h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><p>定义两个模块   <strong>user</strong> 和  <strong>setting</strong></p>\n<p>user中管理用户的状态  token </p>\n<p>setting中管理 应用的名称 name</p>\n<h3 id=\"定义两个模块\"><a href=\"#定义两个模块\" class=\"headerlink\" title=\"定义两个模块\"></a>定义两个模块</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const store  = new Vuex.Store(&#123;</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    user: &#123;</span><br><span class=\"line\">       state: &#123;</span><br><span class=\"line\">         token: &#x27;12345&#x27;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    setting: &#123;</span><br><span class=\"line\">      state: &#123;</span><br><span class=\"line\">         name: &#x27;Vuex实例&#x27;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-store-state-模块名称-属性名\"><a href=\"#使用-store-state-模块名称-属性名\" class=\"headerlink\" title=\"使用 $store.state.模块名称.属性名\"></a>使用 $store.<strong><code>state</code></strong>.<strong><code>模块名称</code></strong>.<strong><code>属性名</code></strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">      &lt;div&gt;用户token &#123;&#123; $store.state.user.token &#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">      &lt;div&gt;网站名称 &#123;&#123; $store.state.setting.name &#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<p>使用getters获取属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">getters</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">token</span>: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.<span class=\"property\">user</span>.<span class=\"property\">token</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.<span class=\"property\">setting</span>.<span class=\"property\">name</span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">      ...<span class=\"title function_\">mapGetters</span>([<span class=\"string\">&#x27;token&#x27;</span>, <span class=\"string\">&#x27;name&#x27;</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模块化中的命名空间\"><a href=\"#模块化中的命名空间\" class=\"headerlink\" title=\"模块化中的命名空间\"></a>模块化中的命名空间</h3><p>默认情况下，模块内部的 action、mutation 和 getter 是注册在<strong>全局命名空间</strong>的——这样使得多个模块能够对同一 mutation 或 action 作出响应。但是，如果我们想保证内部模块的高封闭性，我们可以采用namespaced来进行设置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">user</span>: &#123;</span><br><span class=\"line\">     <span class=\"attr\">namespaced</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">     <span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">       <span class=\"attr\">token</span>: <span class=\"string\">&#x27;12345&#x27;</span></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     <span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">//  这里的state表示的是user的state</span></span><br><span class=\"line\">       updateToken (state) &#123;</span><br><span class=\"line\">          state.<span class=\"property\">token</span> = <span class=\"number\">678910</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方案1：直接调用-带上模块的属性名路径-store-dispatch-modelName-x2F-mutationName\"><a href=\"#方案1：直接调用-带上模块的属性名路径-store-dispatch-modelName-x2F-mutationName\" class=\"headerlink\" title=\"方案1：直接调用-带上模块的属性名路径$store.dispatch(modelName&#x2F;mutationName)\"></a>方案1：<strong>直接调用-带上模块的属性名路径$store.dispatch(modelName&#x2F;mutationName)</strong></h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">test () &#123;</span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">dispatch</span>(<span class=\"string\">&#x27;user/updateToken&#x27;</span>) <span class=\"comment\">// 直接调用方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方案2：辅助函数-带上模块的属性名路径-mapMutations-modelName-x2F-mutaionName\"><a href=\"#方案2：辅助函数-带上模块的属性名路径-mapMutations-modelName-x2F-mutaionName\" class=\"headerlink\" title=\"方案2：辅助函数-带上模块的属性名路径 -mapMutations([modelName&#x2F;mutaionName])\"></a>方案2：<strong>辅助函数-带上模块的属性名路径</strong> -mapMutations([modelName&#x2F;mutaionName])</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">     ...mapMutations([&#x27;user/updateToken&#x27;]),</span><br><span class=\"line\">     test () &#123;</span><br><span class=\"line\">         this[&#x27;user/updateToken&#x27;]()</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&lt;button @click=&quot;test&quot;&gt;修改token&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方案3：-createNamespacedHelpers-创建基于某个命名空间辅助函数\"><a href=\"#方案3：-createNamespacedHelpers-创建基于某个命名空间辅助函数\" class=\"headerlink\" title=\"方案3： createNamespacedHelpers  创建基于某个命名空间辅助函数\"></a>方案3： <strong>createNamespacedHelpers</strong>  创建基于某个命名空间辅助函数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &#123; mapGetters, createNamespacedHelpers &#125; from &#x27;vuex&#x27;</span><br><span class=\"line\">const &#123; mapMutations &#125; = createNamespacedHelpers(&#x27;user&#x27;)</span><br><span class=\"line\">&lt;button @click=&quot;updateToken&quot;&gt;修改token2&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n","categories":["项目知识"],"tags":["vuex","store"]},{"title":"vue - 父组件清除子组件的表单校验无效问题 表单初始值 nextTick()","url":"/2022/07/13/vue-%E7%88%B6%E7%BB%84%E4%BB%B6%E6%B8%85%E9%99%A4%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84%E8%A1%A8%E5%8D%95%E6%A0%A1%E9%AA%8C%E6%97%A0%E6%95%88%E9%97%AE%E9%A2%98-%E8%A1%A8%E5%8D%95%E5%88%9D%E5%A7%8B%E5%80%BC-nextTick/","content":"<h2 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h2><p>父组件 father.vue 里面有一个ref.dialog的子组件对话框</p>\n<p>子组件 add-dialog.vue 里面有一个ref&#x3D;form的表单</p>\n<p>父组件调用子组件中的表单对象，使用表单对象的清除校验方法？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">dialog</span>.<span class=\"property\">$refs</span>.<span class=\"property\">form</span>.<span class=\"title function_\">resetFields</span>()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"坑1\"><a href=\"#坑1\" class=\"headerlink\" title=\"坑1\"></a>坑1</h3><p>ref获取dom对象的前提，对象要已经挂载到页面上，否则获取不到。</p>\n<p>解决：在每次使用$refs使用dom对象前，先打印看看这个对象在这一执行步骤时是否存在了。</p>\n<h3 id=\"坑2\"><a href=\"#坑2\" class=\"headerlink\" title=\"坑2\"></a>坑2</h3><p>resetFields方法的作用</p>\n<ol>\n<li>清除表单校验规则（红色警告字体），避免下次一打开表单就显示警告</li>\n<li>恢复表单数据到初始值（mounted之前的数据为表单初始值）因此，如果在做表单数据回显时，直接将数据赋值给表单对象，那么该数据就会在挂载前赋值上去，导致表单初始值变成当前的数据对象。可以使用$nextTIck(()&#x3D;&gt;{})，等数据和dom都挂载完成后，在执行数据回显操作</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数据回显放入$nextTIck中执行</span></span><br><span class=\"line\"> <span class=\"comment\">// 在表单mounted之后再赋值，避免重置表单失败（重置表单-&gt;恢复mounted之前的初始值)</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.$nextTick(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">form</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">pc_code</span>: row.<span class=\"property\">province_control_pc</span>,</span><br><span class=\"line\">        <span class=\"attr\">zslx_code</span>: row.<span class=\"property\">province_control_zslx</span>,</span><br><span class=\"line\">        <span class=\"attr\">year</span>: row.<span class=\"property\">province_control_year</span>,</span><br><span class=\"line\">        <span class=\"attr\">province_code</span>: row.<span class=\"property\">province_control_province</span>,</span><br><span class=\"line\">        <span class=\"attr\">province_score</span>: row.<span class=\"property\">province_control_score</span>,</span><br><span class=\"line\">        <span class=\"attr\">province_majorScore</span>: row.<span class=\"property\">province_control_majorScore</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"nextTick-方法理解\"><a href=\"#nextTick-方法理解\" class=\"headerlink\" title=\"nextTick()方法理解\"></a>nextTick()方法理解</h2><p><em>将回调函数延迟执行。简单理解：当数据更新了，在dom中渲染后，自动执行该函数</em></p>\n<h2 id=\"经验\"><a href=\"#经验\" class=\"headerlink\" title=\"经验\"></a>经验</h2><p>表单数据回显都放在nextTick中赋值，避免表单清除校验时无法清除数据。</p>\n","tags":["前端 vue"]},{"title":"分页组件el-pagination","url":"/2022/06/24/%E5%88%86%E9%A1%B5%E7%BB%84%E4%BB%B6el-pagination/","content":"<p>[TOC]</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本篇文章用于简要描述el-table和el-pagination之间如何交互，以及编码中遇到的问题。</p>\n<p>数据：静态假数据（用于学习和测试，自己编的数据，请勿当真）</p>\n<h3 id=\"el-pagination使用方式\"><a href=\"#el-pagination使用方式\" class=\"headerlink\" title=\"el-pagination使用方式\"></a>el-pagination使用方式</h3><blockquote>\n<p>官方地址：<a href=\"https://element.eleme.cn/#/zh-CN/component/pagination#dai-you-bei-jing-se-de-fen-ye\">https://element.eleme.cn/#/zh-CN/component/pagination#dai-you-bei-jing-se-de-fen-ye</a></p>\n</blockquote>\n<h4 id=\"基础用法\"><a href=\"#基础用法\" class=\"headerlink\" title=\"基础用法\"></a>基础用法</h4><img src=\"/2022/06/24/%E5%88%86%E9%A1%B5%E7%BB%84%E4%BB%B6el-pagination/image-20220624160229958.png\" class=\"\" title=\"image-20220624160229958\">\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;el-pagination</span><br><span class=\"line\">               :current-page=&quot;page.page&quot;</span><br><span class=\"line\">               :page-size=&quot;page.size&quot;</span><br><span class=\"line\">               layout=&quot;prev, pager, next&quot;</span><br><span class=\"line\">               :total=&quot;page.total&quot;</span><br><span class=\"line\">               @current-change=&quot;handleCurrentChange&quot;</span><br><span class=\"line\">               /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 接收表格数据（在mounted中，获取数据，同时计算数据总数）</span></span><br><span class=\"line\">    <span class=\"attr\">datalist</span>: [],</span><br><span class=\"line\">    <span class=\"comment\">// 分页相关数据</span></span><br><span class=\"line\">    <span class=\"attr\">page</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">page</span>: <span class=\"number\">1</span>, <span class=\"comment\">// 当前页数</span></span><br><span class=\"line\">      <span class=\"attr\">size</span>: <span class=\"number\">10</span>, <span class=\"comment\">// 每一页放的数据个数</span></span><br><span class=\"line\">      <span class=\"attr\">total</span>: <span class=\"number\">0</span> <span class=\"comment\">// 数据总数，需要在所有数据挂载完毕后才能在mounted中计算数据总数，</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>注释：</p>\n<p>（1）<strong>datalist</strong>：表格展示数据。由于需要分页组件需要计算总数据量，所以需要把所有页面数据都加载完之后，才能计算数据长度。故选择created()或mounted()生命周期函数。此处使用mounted()即刷新渲染html页面会重新运行mounted函数。</p>\n<p><strong>created</strong>(): 在所有数据和函数加载完成后，未渲染html之后就执行</p>\n<p><strong>mounted</strong>(): 在页面刷新后，即渲染完html之后才会重新执行</p>\n<p><strong>踩坑！</strong>声明周期函数不写在methods中，写在methods外，和methods平级。很容易在编码时自以为函数都要写在methods里面，导致生命周期函数不执行。</p>\n<p>（2）page对象：存储与分页相关的数据</p>\n<p><strong>page</strong>：用于当前页面的显示。当page值发生改变时，赋值给表格的显示数据也要改变。（分页组件通过这个与表格组件交互）</p>\n<p>注：分页组件和表格组件是两个独立组件，需要通过函数将两者连接起来，实现不同页面显示不同内容。如果是动态数据，就把page对象传递给后端接口，由接口根据page对象返回不同的数据给表格显示。</p>\n<p><strong>total</strong>：通过设置了total实现分页组件下面的 1 2 3 4…10 数字显示。初始为0，通过mounted函数中计算总数居量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">page</span>.<span class=\"property\">total</span> = tableList.<span class=\"property\">length</span> <span class=\"comment\">// 修改分页组件的总数居数量</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">datalist</span> = tableList.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">page</span>.<span class=\"property\">size</span>) <span class=\"comment\">// 为表格附上第一页的数据</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>注：测试发现，此处使用created也能实现效果。</p>\n<p>最终解决方法：通过getDataList()函数获取数据，将数据赋值给datalist，在created中调用datalist。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">getSchoolList</span>(<span class=\"params\"></span>) &#123; <span class=\"comment\">// 根据页码获取当前所有数据</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">page</span>.<span class=\"property\">total</span> = tableList.<span class=\"property\">length</span> <span class=\"comment\">// 修改分页组件的总数居数量</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">datalist</span> = tableList.<span class=\"title function_\">slice</span>((<span class=\"variable language_\">this</span>.<span class=\"property\">page</span>.<span class=\"property\">page</span> - <span class=\"number\">1</span>) * <span class=\"variable language_\">this</span>.<span class=\"property\">page</span>.<span class=\"property\">size</span>,</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">page</span>.<span class=\"property\">page</span> * <span class=\"variable language_\">this</span>.<span class=\"property\">page</span>.<span class=\"property\">size</span>) <span class=\"comment\">// 为表格附上该页面的数据</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">created</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">getSchoolList</span>() <span class=\"comment\">// 获取所有数据</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h4><p><strong>@current-change&#x3D;”handleCurrentChange”</strong> </p>\n<p>用于设置改变当前页面之后显示的不同数据。通过这个方法实现分页组件与表格数据的交互。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">handleCurrentChange</span>(<span class=\"params\">newPage</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">page</span>.<span class=\"property\">page</span> = newPage <span class=\"comment\">// 修改当前页</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">getPageList</span>() <span class=\"comment\">// 获取当前页的数据给datalist</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 获取当前页的数据</span></span><br><span class=\"line\"><span class=\"title function_\">getPageList</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 取出newPage页的数据给表格数据显示</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">datalist</span> = tableList.<span class=\"title function_\">slice</span>(</span><br><span class=\"line\">            (<span class=\"variable language_\">this</span>.<span class=\"property\">page</span>.<span class=\"property\">page</span> - <span class=\"number\">1</span>) * <span class=\"variable language_\">this</span>.<span class=\"property\">page</span>.<span class=\"property\">size</span>,</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">page</span>.<span class=\"property\">page</span> * <span class=\"variable language_\">this</span>.<span class=\"property\">page</span>.<span class=\"property\">size</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">// 将获取数据单独放在一个函数中，方便编辑数据、新增数据、删除数据后重新调用获取数据的函数，重新渲染页面数据。</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"踩坑2！\"><a href=\"#踩坑2！\" class=\"headerlink\" title=\"踩坑2！\"></a><strong>踩坑2！</strong></h4><p>获取当前页数据时，我一开始使用splice，导致每次数组时都改变了原数组。</p>\n<h5 id=\"截取数组元素方法\"><a href=\"#截取数组元素方法\" class=\"headerlink\" title=\"截取数组元素方法\"></a>截取数组元素方法</h5><p>splice() : 会改变原数组</p>\n<p>slice(): 不会改变原数组</p>\n<h2 id=\"总代码\"><a href=\"#总代码\" class=\"headerlink\" title=\"总代码\"></a>总代码</h2><h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dashboard-container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;app-container&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 信息显示表格 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">el-table</span> <span class=\"attr\">:data</span>=<span class=\"string\">&quot;datalist&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 100%&quot;</span> <span class=\"attr\">stripe</span> <span class=\"attr\">border</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">fixed</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;index&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;序号&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;school_id&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;学校编号&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;140&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;学校名&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;140&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">slot-scope</span>=<span class=\"string\">&quot;scope&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-tag</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;medium&quot;</span>&gt;</span>&#123;&#123; scope.row.school_name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">el-tag</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;school_level&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;等级&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;school_type&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;类型&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;140&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;school_nature&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;办学性质&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;140&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;school_region&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;区域&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;school_province&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;省份&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;school_city&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;城市&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;school_belong&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;隶属单位&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;school_rk&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;最新软科排名&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;80&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;school_wsl&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;最新校友会排名&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;80&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;school_xyh&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;最新武书连排名&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;80&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;school_qs&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;最新QS排名&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;80&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;school_us&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;最新US排名&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;80&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;school_tws&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;最新泰晤士排名&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;80&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">prop</span>=<span class=\"string\">&quot;school_requirments&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">label</span>=<span class=\"string\">&quot;报考要求&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">width</span>=<span class=\"string\">&quot;140&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;200px&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;操作&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"comment\">&lt;!-- 通过作用域插槽，通过点击行，获得父组件行的数据 --&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">slot-scope</span>=<span class=\"string\">&quot;scope&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-button</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">size</span>=<span class=\"string\">&quot;small&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              @<span class=\"attr\">click</span>=<span class=\"string\">&quot;handleClick(scope.row)&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            &gt;</span>编辑<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-button</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">size</span>=<span class=\"string\">&quot;small&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">type</span>=<span class=\"string\">&quot;danger&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              @<span class=\"attr\">click</span>=<span class=\"string\">&quot;handleDelete(scope.row)&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            &gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">el-table</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 分页组件 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">el-row</span> <span class=\"attr\">justify</span>=<span class=\"string\">&quot;center&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;flex&quot;</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;middle&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;height: 60px&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-pagination</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">:current-page</span>=<span class=\"string\">&quot;page.page&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">:page-size</span>=<span class=\"string\">&quot;page.size&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">layout</span>=<span class=\"string\">&quot;prev, pager, next&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">:total</span>=<span class=\"string\">&quot;page.total&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          @<span class=\"attr\">current-change</span>=<span class=\"string\">&quot;handleCurrentChange&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        /&gt;</span></span><br><span class=\"line\">      &lt;/el-row</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"javascript\"><a href=\"#javascript\" class=\"headerlink\" title=\"javascript\"></a>javascript</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">  <span class=\"attr\">school_id</span>: <span class=\"string\">&#x27;10074&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_name</span>: <span class=\"string\">&#x27;华中科技大学&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_level</span>: <span class=\"string\">&#x27;B&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_type</span>: <span class=\"string\">&#x27;本科一批&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_nature</span>: <span class=\"string\">&#x27;本科&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_region</span>: <span class=\"string\">&#x27;中部&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_province</span>: <span class=\"string\">&#x27;湖北&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_city</span>: <span class=\"string\">&#x27;武汉&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_211</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_985</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_belong</span>: <span class=\"string\">&#x27;湖北省&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_rk</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_xyh</span>: <span class=\"number\">12</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_wsl</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_qs</span>: <span class=\"number\">69</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_us</span>: <span class=\"number\">178</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_tws</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_requirments</span>: <span class=\"string\">&#x27;报考要求&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> data1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">school_id</span>: <span class=\"string\">&#x27;20046&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_name</span>: <span class=\"string\">&#x27;武汉大学&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_level</span>: <span class=\"string\">&#x27;B&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_type</span>: <span class=\"string\">&#x27;本科一批&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_nature</span>: <span class=\"string\">&#x27;本科&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_region</span>: <span class=\"string\">&#x27;中部&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_province</span>: <span class=\"string\">&#x27;湖北&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_city</span>: <span class=\"string\">&#x27;武汉&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_211</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_985</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_belong</span>: <span class=\"string\">&#x27;湖北省&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_rk</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_xyh</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_wsl</span>: <span class=\"number\">80</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_qs</span>: <span class=\"number\">99</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_us</span>: <span class=\"number\">237</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_tws</span>: <span class=\"number\">6</span>,</span><br><span class=\"line\">  <span class=\"attr\">school_requirments</span>: <span class=\"string\">&#x27;报考要求&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> tableList = [</span><br><span class=\"line\">  data,</span><br><span class=\"line\">  data1,</span><br><span class=\"line\">  data,</span><br><span class=\"line\">  data1,</span><br><span class=\"line\">  data,</span><br><span class=\"line\">  data1,</span><br><span class=\"line\">  data,</span><br><span class=\"line\">  data1,</span><br><span class=\"line\">  data,</span><br><span class=\"line\">  data1,</span><br><span class=\"line\">  data,</span><br><span class=\"line\">  data1,</span><br><span class=\"line\">  data,</span><br><span class=\"line\">  data1,</span><br><span class=\"line\">  data,</span><br><span class=\"line\">  data1,</span><br><span class=\"line\">  data1,</span><br><span class=\"line\">  data,</span><br><span class=\"line\">  data1,</span><br><span class=\"line\">  data,</span><br><span class=\"line\">  data1</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;SchoolInfo&#x27;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 接收表格数据（在mounted中，获取数据，同时计算数据总数</span></span><br><span class=\"line\">      <span class=\"attr\">datalist</span>: [],</span><br><span class=\"line\">      <span class=\"comment\">// 分页相关数据</span></span><br><span class=\"line\">      <span class=\"attr\">page</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">page</span>: <span class=\"number\">1</span>, <span class=\"comment\">// 当前页数</span></span><br><span class=\"line\">        <span class=\"attr\">size</span>: <span class=\"number\">10</span>, <span class=\"comment\">// 每一页放的数据个数</span></span><br><span class=\"line\">        <span class=\"attr\">total</span>: <span class=\"number\">1000</span> <span class=\"comment\">// 数据总数，需要在所有数据挂载完毕后才能在mounted中计算数据总数，</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">page</span>.<span class=\"property\">total</span> = tableList.<span class=\"property\">length</span> <span class=\"comment\">// 修改分页组件的总数居数量</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">datalist</span> = tableList.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">page</span>.<span class=\"property\">size</span>) <span class=\"comment\">// 为表格附上第一页的数据</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">handleCurrentChange</span>(<span class=\"params\">newPage</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">page</span>.<span class=\"property\">page</span> = newPage <span class=\"comment\">// 修改当前页</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">getPageList</span>() <span class=\"comment\">// 获取当前页的数据给datalist</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 获取当前页的数据</span></span><br><span class=\"line\">    <span class=\"title function_\">getPageList</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 取出newPage页的数据给表格数据显示</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">datalist</span> = tableList.<span class=\"title function_\">slice</span>(</span><br><span class=\"line\">        (<span class=\"variable language_\">this</span>.<span class=\"property\">page</span>.<span class=\"property\">page</span> - <span class=\"number\">1</span>) * <span class=\"variable language_\">this</span>.<span class=\"property\">page</span>.<span class=\"property\">size</span>,</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">page</span>.<span class=\"property\">page</span> * <span class=\"variable language_\">this</span>.<span class=\"property\">page</span>.<span class=\"property\">size</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"分页效果展示\"><a href=\"#分页效果展示\" class=\"headerlink\" title=\"分页效果展示\"></a>分页效果展示</h3><p><video src=\"分页组件el-pagination/高考信息系统 - Google Chrome 2022-06-24 16-26-53.mp4\"></video></p>\n","categories":["element-ui"],"tags":["分页组件"]},{"title":"前端编码日常记录","url":"/2022/06/29/%E5%89%8D%E7%AB%AF%E7%BC%96%E7%A0%81%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/","content":"<h3 id=\"前后端分离-跨域\"><a href=\"#前后端分离-跨域\" class=\"headerlink\" title=\"前后端分离-跨域\"></a>前后端分离-跨域</h3><p>比如后端的请求接口：<a href=\"http://192.168.1.**):8080/user/login\">http://192.168.1.**):8080/user/login</a></p>\n<p>由于前端与后端地址不同，不能够直接请求后端接口需要解决跨域问题，即用编写前端的电脑作为请求代理。</p>\n<ol>\n<li>vue,config.js 的proxy配置跨域代理</li>\n<li>设置请求的基地址为&#x2F;api</li>\n<li>api实例</li>\n</ol>\n<p>vue,config.js 的proxy配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 代理配置 - 解决跨域问题（前端和后端接口不在同一域名下</span></span><br><span class=\"line\">  <span class=\"attr\">port</span>: port,</span><br><span class=\"line\">  <span class=\"attr\">open</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">overlay</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">warnings</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">errors</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">proxy</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;/api&#x27;</span>: &#123; <span class=\"comment\">// 前端访问基地址</span></span><br><span class=\"line\">      <span class=\"attr\">target</span>: <span class=\"string\">&#x27;http://192.168.1.**:8080&#x27;</span>, <span class=\"comment\">// 后端地接口地址</span></span><br><span class=\"line\">      <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否跨域</span></span><br><span class=\"line\">      <span class=\"attr\">pathRewrite</span>: &#123; <span class=\"comment\">// 如果接口本身没有/api需要通过pathRewrite来重写了地址</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;^/api&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\">// 这里一定要重写为空（因为后端接口没有/api路径，直接才ip后接的接口）</span></span><br><span class=\"line\">          <span class=\"comment\">//这里理解成用‘/api’代替target里面的地址，组件中我们调接口时直接用/api代替</span></span><br><span class=\"line\">        <span class=\"comment\">// 比如我要调用&#x27;http://0.0:300/user/add&#x27;，直接写‘/api/user/add’即可</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>设置请求的基地址为&#x2F;api</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 创建一个axios实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> service = axios.<span class=\"title function_\">create</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">baseURL</span>: <span class=\"string\">&#x27;/api&#x27;</span>, <span class=\"comment\">// 设置axios请求的基础的基础地址(通过/api别名指定后端路由)</span></span><br><span class=\"line\">  <span class=\"attr\">timeout</span>: <span class=\"number\">5000</span> <span class=\"comment\">// 定义5秒超时</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>api请求实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">login</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/user/login&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">    data</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>network显示的请求接口为</p>\n<img src=\"/2022/06/29/%E5%89%8D%E7%AB%AF%E7%BC%96%E7%A0%81%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/image-20220629162315846.png\" class=\"\" title=\"image-20220629162315846\">\n\n<p>虽然显示请求 <a href=\"http://localhost:8888/api/user/list%EF%BC%8C%E5%85%B6%E5%AE%9E%E6%9C%AC%E5%9C%B0%E4%BC%9A%E8%BD%AC%E5%8F%91http://192.168.1.**:8080/user/login\">http://localhost:8888/api/user/list，其实本地会转发http://192.168.1.**:8080/user/login</a> 请求，即实现前端访问后端接口</p>\n<h3 id=\"父传子\"><a href=\"#父传子\" class=\"headerlink\" title=\"父传子\"></a>父传子</h3><h5 id=\"父组件点击编辑按钮，传递数据给子组件，子组件在表单内进行数据回显。\"><a href=\"#父组件点击编辑按钮，传递数据给子组件，子组件在表单内进行数据回显。\" class=\"headerlink\" title=\"父组件点击编辑按钮，传递数据给子组件，子组件在表单内进行数据回显。\"></a>父组件点击编辑按钮，传递数据给子组件，子组件在表单内进行数据回显。</h5><p>知识点：</p>\n<ol>\n<li>谁调用api获取数据？（父组件）</li>\n<li>父组件通过什么方式传数据给子组件？（:变量名&#x3D;“变量名”）</li>\n<li>子组件怎么接收？（props）</li>\n<li>子组件怎么使用数据进行回显？（el-input中使用v-model）</li>\n</ol>\n<p>父组件 el-table</p>\n<p>子组件 el-dialog</p>\n<p>触发：表格每一行都有一个用户编辑的操作，点击编辑按钮后，弹出子组件表单对话框，表单对话框进行该行数据回显。</p>\n<img src=\"/2022/06/29/%E5%89%8D%E7%AB%AF%E7%BC%96%E7%A0%81%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/image-20220629154002779.png\" class=\"\" title=\"image-20220629154002779\">\n\n<p>假设：需求为全部用户信息表，每一行为一个用户的信息。父组件data中有一个form表示该行用户信息，子组件props中有一个form:{}用于接收父组件传来的用户的信息。</p>\n<p>操作步骤：</p>\n<ol>\n<li><p>父组件调有api接口，根据id查询该用户的所有信息</p>\n</li>\n<li><p>this.form &#x3D; userinfo &#x2F;&#x2F; 父组件保存用户信息</p>\n</li>\n<li><p>&lt;子组件 :form&#x3D;”form”&#x2F;&gt;  通过prop形式，将父组件得到的用户信息传递给子组件，子组件通过v-model绑定数据显示在el-input中</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-form-item</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;密码&quot;</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">el-input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;form.password&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input_box&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n","categories":["vue"]},{"title":"我的第一篇博客文章","url":"/2022/06/13/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/","content":""},{"title":"前端面试学习1 - 浏览器跨域","url":"/2022/07/14/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%AD%A6%E4%B9%A01-%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B7%A8%E5%9F%9F/","content":"<h1 id=\"浏览器跨域\"><a href=\"#浏览器跨域\" class=\"headerlink\" title=\"浏览器跨域\"></a>浏览器跨域</h1><h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li><a href=\"https://febook.hzfe.org/awesome-interview/book1/browser-cross-origin\">剑指前端Offer</a></li>\n<li><a href=\"https://blog.csdn.net/hdchangchang/article/details/80112593\">webpack之devServer配置</a></li>\n</ol>\n<h2 id=\"相关问题\"><a href=\"#相关问题\" class=\"headerlink\" title=\"相关问题\"></a>相关问题</h2><ol>\n<li>什么是跨域？</li>\n<li>为什么会跨域？</li>\n<li>为什么有跨域限制？</li>\n</ol>\n<h2 id=\"回答关键点\"><a href=\"#回答关键点\" class=\"headerlink\" title=\"回答关键点\"></a>回答关键点</h2><ol>\n<li>浏览器有跨域限制，服务端没有跨域</li>\n<li><strong>浏览器</strong>为了<strong>请求安全</strong>而引入的<strong>基于同源策略</strong>的安全特性</li>\n</ol>\n<h2 id=\"判定跨域\"><a href=\"#判定跨域\" class=\"headerlink\" title=\"判定跨域\"></a>判定跨域</h2><p>当页面和请求的协议（https）、主机（localhost）或端口（8080）不同时，浏览器判定两者不同源，从而产生跨域。</p>\n<img src=\"/2022/07/14/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%AD%A6%E4%B9%A01-%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B7%A8%E5%9F%9F/image-20220714151119753.png\" class=\"\" title=\"image-20220714151119753\">\n\n\n\n<h3 id=\"跨域的解决方案\"><a href=\"#跨域的解决方案\" class=\"headerlink\" title=\"跨域的解决方案\"></a>跨域的解决方案</h3><h4 id=\"1-CORS-Cross-Origin-Resource-Sharing\"><a href=\"#1-CORS-Cross-Origin-Resource-Sharing\" class=\"headerlink\" title=\"1.CORS (Cross-Origin Resource Sharing)\"></a>1.CORS (Cross-Origin Resource Sharing)</h4><p>CORS 是目前最为广泛的解决跨域问题的方案。方案依赖<strong>服务端&#x2F;后端在响应头中添加</strong> <code>Access-Control-Allow-*</code> 头，告知浏览器端通过此请求。</p>\n<h4 id=\"2-反向代理\"><a href=\"#2-反向代理\" class=\"headerlink\" title=\"2.反向代理\"></a>2.反向代理</h4><p>反向代理解决跨域问题的方案依赖<code>同源的服务端对请求做一个转发处理</code>，将请求从跨域请求转换成同源请求。</p>\n<h5 id=\"vue实现反向代理的具体实现方式\"><a href=\"#vue实现反向代理的具体实现方式\" class=\"headerlink\" title=\"vue实现反向代理的具体实现方式\"></a>vue实现反向代理的具体实现方式</h5><p>vue.config.js</p>\n<blockquote>\n<p>DevServer 是webpack开发服务器</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 代理配置 - 解决跨域问题（前端和后端接口不在同一域名下</span></span><br><span class=\"line\">  <span class=\"attr\">host</span>: <span class=\"string\">&#x27;0.0.0.0&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">port</span>: port,</span><br><span class=\"line\">  <span class=\"attr\">open</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">overlay</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">warnings</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">errors</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">proxy</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;/api&#x27;</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">target</span>: <span class=\"string\">&#x27;http://192.168.1.13:8080&#x27;</span>, <span class=\"comment\">// 后端接口</span></span><br><span class=\"line\">      <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否跨域</span></span><br><span class=\"line\">      <span class=\"attr\">pathRewrite</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;^/api&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>理解</p>\n<blockquote>\n<p>使用本地服务端代理跨域的API后端开发服务器。</p>\n</blockquote>\n<ul>\n<li>假设你主机名为 localhost:8080 , 请求 API 的 url 是 <code>http://192.168.1.13:8080/user/list</code></li>\n<li>‘&#x2F;api：如果点击某个按钮，触发请求 <em>API</em> 事件，这时请求 <em>url</em> 是<code>http://localhost:8080/api/user/list</code></li>\n<li>changeOrigin：如果 true ，那么 <code>http://localhost:8080/api/user/list</code>变为 <code>http://192.168.1.13:8080/api/user/list</code> 。但还不是我们要的 url</li>\n<li>pathRewrite：重写路径。匹配 &#x2F;api ，然后变为’’ ，那么 url 最终为 <code>http://192.168.1.13:8080/user/list </code>。</li>\n</ul>\n<p>总结：本地浏览器请求同源的服务端 <code>http://localhost:8080/api/user/list</code>,本地服务端请求API后端开发服务器，并且根据重写路径，用空字段代替&#x2F;api字段，最终请求到实际的后端开发服务器 <code>http://192.168.1.13:8080/user/list </code></p>\n<p>创建axois实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个axios实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> service = axios.<span class=\"title function_\">create</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">baseURL</span>: <span class=\"string\">&#x27;/api&#x27;</span>, <span class=\"comment\">// 设置axios请求的基础的基础地址(通过/api别名指定后端路由)</span></span><br><span class=\"line\">  <span class=\"attr\">timeout</span>: <span class=\"number\">5000</span> <span class=\"comment\">// 定义5秒超时</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n","categories":["前端面试题"],"tags":["浏览器"]},{"title":"华为2016校园招聘上机笔试题","url":"/2022/06/14/%E5%8D%8E%E4%B8%BA2016%E6%A0%A1%E5%9B%AD%E6%8B%9B%E8%81%98%E4%B8%8A%E6%9C%BA%E7%AC%94%E8%AF%95%E9%A2%98/","content":"<p>题目一：老师想知道从某某同学当中，分数最高的是多少，现在请你编程模拟老师的询问。当然，老师有时候需要更新某位同学的成绩.</p>\n<p>反思：题目不难可以用暴力解法，不熟悉 while (sc.hasNext()) 导致一直运行失败。</p>\n<p>学会了什么：以后要把写的代码框在while (sc.hasNext()) {} 中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import java.util.*;</span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        // 1. 初始化</span><br><span class=\"line\">        Scanner sc = new Scanner(System.in);</span><br><span class=\"line\">        // 不加这一句while 运行不通过，加了以后运行通过</span><br><span class=\"line\">        while (sc.hasNext()) &#123;</span><br><span class=\"line\">            int N = sc.nextInt();</span><br><span class=\"line\">            int M = sc.nextInt();</span><br><span class=\"line\">            int[] grades = new int[N+1];</span><br><span class=\"line\">            grades[0] = -1;</span><br><span class=\"line\">            for (int i = 1; i &lt;= N; i++) &#123;</span><br><span class=\"line\">                grades[i] = sc.nextInt();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sc.nextLine();</span><br><span class=\"line\">            int[][] operator = new int[M][3];</span><br><span class=\"line\">            for (int i = 0; i &lt; M; i++) &#123;</span><br><span class=\"line\">                String line = sc.nextLine();</span><br><span class=\"line\">                String opera = line.split(&quot; &quot;)[0];</span><br><span class=\"line\">                int b = Integer.valueOf(line.split(&quot; &quot;)[1]);</span><br><span class=\"line\">                int c = Integer.valueOf(line.split(&quot; &quot;)[2]);</span><br><span class=\"line\">                if (opera.equals(&quot;Q&quot;)) &#123;</span><br><span class=\"line\">                    System.out.println(getMax(grades, b, c));</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    grades[b] = c;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">            sc.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">    public static int getMax(int[] grades, int start, int end) &#123;</span><br><span class=\"line\">        if (start == end) return grades[start];</span><br><span class=\"line\">        if (start &gt; end) &#123;</span><br><span class=\"line\">            int temp = end;</span><br><span class=\"line\">            end = start;</span><br><span class=\"line\">            start = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int max = grades[start];</span><br><span class=\"line\">        for (int i = start; i &lt;= end; i++) &#123;</span><br><span class=\"line\">            max = Math.max(max, grades[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>题目二：开发一个简单错误记录功能小模块，能够记录出错的代码所在的文件名称和行号。</p>\n<p>反思：着急了题目没读懂。</p>\n<p>输入多行数据，每一行数据表示该文件的错误行数，可能存在一个文件有多个行错误，故匹配多行输入，对于文件名和行数完全相同的记录，最后输出合并为一行，错误次数++</p>\n<p>只记录最后的八条错误记录（输入的最后八行）</p>\n<p>输出中不包含文件路径，如果文件名大于16字符，则截取最后的16字符。</p>\n<p>学到了什么：还没有解决完，不会排序！！！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">sc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        HashMap&lt;String,Integer&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashMap</span>&lt;&gt;(); </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (sc.hasNext()) &#123;</span><br><span class=\"line\">            String[] arr = sc.nextLine().split(<span class=\"string\">&quot;\\\\\\\\&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">nameAndLine</span> <span class=\"operator\">=</span> arr[arr.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map.containsKey(nameAndLine)) &#123;</span><br><span class=\"line\">                map.put(nameAndLine, map.get(nameAndLine) + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                map.put(nameAndLine, <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sc.close();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取最后八位元素</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String key: map.keySet()) &#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count &gt; map.keySet().size() - <span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">fileName</span> <span class=\"operator\">=</span> key.split(<span class=\"string\">&quot; &quot;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">lineNum</span> <span class=\"operator\">=</span> key.split(<span class=\"string\">&quot; &quot;</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fileName.length() &gt; <span class=\"number\">16</span>)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 从 key.length() - 16 的后一个元素开始，截取所有字符</span></span><br><span class=\"line\">                    fileName = fileName.substring(key.length() - <span class=\"number\">16</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(fileName + <span class=\"string\">&quot; &quot;</span> + lineNum + <span class=\"string\">&quot; &quot;</span> + map.get(key));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>题目三：扑克牌游戏大家应该都比较熟悉了，一副牌由54张组成，含3~A，2各4张，小王1张，大王1张。牌面从小到大用如下字符和字符串表示（其中，小写joker表示小王，大写JOKER表示大王）3 4 5 6 7 8 9 10 J Q K A 2 joker JOKER</p>\n<p>反思：拿到题目的第一感觉是复杂，需要很多if else，做题时的思绪也是很乱的理不清楚。不能完全沉下心思，浮躁觉得自己不行就得看答案才能解答。总觉得复杂方法用暴力解法就不对，其实没有不对，暴力是最基本的，在暴力之上再考虑其他方法，连暴力都做不出来和谈技巧呢？最后看到答案觉得很简单，除了复杂以外没有其他技巧，按道理来说是能做出来的题目。</p>\n<p>学到了什么：复杂的题目先理清思路，一点点写下来，就算代码敲出来不对了也可以跟答案比较哪一步想错了、哪一步漏掉了，从而提升思维能力，复杂的题目可以分成几个小模块，分别构造辅助函数实现。</p>\n<p>[^思路理清： ]: </p>\n<ol>\n<li>针对两个手牌，需要判断它们的类型（单张、对子、三张、四张牌的炸弹、五张牌的顺子、大小王），如果它们的类型不同，进入操作2</li>\n<li>类型不同时只有炸弹才能比较出大小–通过类型判断（大小王、四张炸弹），否则无法比较大小返回Error</li>\n<li>类型相同时都可以通过第一张牌来比较大小，针对JQKA2jokerJOKER的情况转换成10以后的数字，通过数字比较大小</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">sc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (sc.hasNext()) &#123;</span><br><span class=\"line\">            String[] card = sc.nextLine().split(<span class=\"string\">&quot;-&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">card1</span> <span class=\"operator\">=</span> card[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">card2</span> <span class=\"operator\">=</span> card[<span class=\"number\">1</span>];</span><br><span class=\"line\">            String[] cards1 = card1.split(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">            String[] cards2 = card2.split(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">card1Type</span> <span class=\"operator\">=</span> checkType(cards1);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">card2Type</span> <span class=\"operator\">=</span> checkType(cards2);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!card1Type.equals(card2Type)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (card1Type.equals(<span class=\"string\">&quot;jokers&quot;</span>)) &#123;</span><br><span class=\"line\">                    res = card1;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (card2Type.equals(<span class=\"string\">&quot;jokers&quot;</span>)) &#123;</span><br><span class=\"line\">                    res = card2;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (card1Type.equals(<span class=\"string\">&quot;bomb&quot;</span>)) &#123;</span><br><span class=\"line\">                    res = card1;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (card2Type.equals(<span class=\"string\">&quot;bomb&quot;</span>)) &#123;</span><br><span class=\"line\">                    res = card2;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    res = <span class=\"string\">&quot;ERROR&quot;</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (getNumber(cards1[<span class=\"number\">0</span>]) &gt; getNumber(cards2[<span class=\"number\">0</span>])) &#123;</span><br><span class=\"line\">                    res = card1;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    res = card2;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">getNumber</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.matches(<span class=\"string\">&quot;[3-9]&quot;</span>) || s.matches(<span class=\"string\">&quot;10&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Integer.valueOf(s);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s.equals(<span class=\"string\">&quot;J&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">11</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s.equals(<span class=\"string\">&quot;Q&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">12</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s.equals(<span class=\"string\">&quot;K&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">13</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s.equals(<span class=\"string\">&quot;A&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">14</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s.equals(<span class=\"string\">&quot;2&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">15</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s.equals(<span class=\"string\">&quot;joker&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">16</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s.equals(<span class=\"string\">&quot;JOKER&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">17</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">checkType</span><span class=\"params\">(String[] card)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> card.length;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            res = <span class=\"string\">&quot;single&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (len == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (card[<span class=\"number\">0</span>].toLowerCase().matches(<span class=\"string\">&quot;joker&quot;</span>) &amp;&amp; card[<span class=\"number\">1</span>].toLowerCase().matches(<span class=\"string\">&quot;joker&quot;</span>)) &#123;</span><br><span class=\"line\">                res = <span class=\"string\">&quot;jokers&quot;</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                res = <span class=\"string\">&quot;double&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (len == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            res = <span class=\"string\">&quot;triple&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (len == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">            res = <span class=\"string\">&quot;bomb&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            res = <span class=\"string\">&quot;shunzi&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["牛客刷题"],"tags":["刷题"]},{"title":"面试题-回调函数、闭包、回调地狱、Promise、Async、Await、指针函数（this）","url":"/2022/07/31/%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/","content":"<p>h</p>\n<h2 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h2><p>【回调函数作为其他函数的参数】</p>\n<p>当一个函数作为另一个函数的参数，传给另一个函数调用，这个作为参数的函数就是回调函数。</p>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><p>[将一个函数在另一个函数中定义并返回这个函数] 使用闭包能够访问函数作用域中的变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 函数内部分函数</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(++i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将函数做为返回值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> bar;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// fn 即为闭包函数</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> fn = <span class=\"title function_\">foo</span>();</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">fn</span>(); <span class=\"comment\">// 1</span></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<p>闭包：一个作用域有权访问另外一个作用域的局部变量，</p>\n<p>好处：可以把一个变量使用范围延伸</p>\n<ol>\n<li>闭包本质仍是函数，只不是从函数内部返回的</li>\n<li>闭包能够创建外部可访问的隔离作用域，避免全局变量污染</li>\n<li>过度使用闭包可能造成内存泄漏</li>\n</ol>\n<p>注：回调函数也能访问函数内部的局部变量。</p>\n<h2 id=\"JS进阶\"><a href=\"#JS进阶\" class=\"headerlink\" title=\"JS进阶\"></a>JS进阶</h2><h3 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h3><p>[它允许在变量声明之前即被访问]</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  <span class=\"comment\">// 访问变量 str</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str + <span class=\"string\">&#x27;world!&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 声明变量 str</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;hello &#x27;</span>;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span>和<span class=\"keyword\">var</span>都有提升，但是<span class=\"keyword\">let</span>定义的变量没有赋值之前是不可以使用、<span class=\"keyword\">var</span>可以使用是<span class=\"literal\">undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ol>\n<li>变量在未声明即被访问时会报语法错误</li>\n<li>变量在声明之前即被访问，变量的值为 <code>undefined</code></li>\n<li><code>let</code> 声明的变量不存在变量提升，推荐使用 <code>let</code>【也有人认为具有提升但是不赋值不能使用】</li>\n<li>变量提升出现在相同作用域当中</li>\n<li>实际开发中推荐先声明再访问变量</li>\n</ol>\n<h3 id=\"函数提升\"><a href=\"#函数提升\" class=\"headerlink\" title=\"函数提升\"></a>函数提升</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  <span class=\"comment\">// 调用函数</span></span><br><span class=\"line\">  <span class=\"title function_\">foo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 声明函数</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;声明之前即被调用...&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 不存在提升现象</span></span><br><span class=\"line\">  <span class=\"title function_\">bar</span>();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> bar = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;函数表达式不存在提升现象...&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ol>\n<li>函数提升能够使函数的声明调用更灵活</li>\n<li>函数表达式不存在提升的现象</li>\n<li>函数提升出现在相同作用域当中</li>\n</ol>\n<h3 id=\"函数参数【默认值、动态参数、剩余参数】\"><a href=\"#函数参数【默认值、动态参数、剩余参数】\" class=\"headerlink\" title=\"函数参数【默认值、动态参数、剩余参数】\"></a>函数参数【默认值、动态参数、剩余参数】</h3><h4 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  <span class=\"comment\">// 设置参数默认值</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">sayHi</span>(<span class=\"params\">name=<span class=\"string\">&quot;小明&quot;</span>, age=<span class=\"number\">18</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"string\">`&lt;p&gt;大家好，我叫<span class=\"subst\">$&#123;name&#125;</span>，我今年<span class=\"subst\">$&#123;age&#125;</span>岁了。&lt;/p&gt;`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 调用函数</span></span><br><span class=\"line\">  <span class=\"title function_\">sayHi</span>();</span><br><span class=\"line\">  <span class=\"title function_\">sayHi</span>(<span class=\"string\">&#x27;小红&#x27;</span>);</span><br><span class=\"line\">  <span class=\"title function_\">sayHi</span>(<span class=\"string\">&#x27;小刚&#x27;</span>, <span class=\"number\">21</span>);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ol>\n<li>声明函数时为形参赋值即为参数的默认值</li>\n<li>如果参数未自定义默认值时，参数的默认值为 <code>undefined</code></li>\n<li>调用函数时没有传入对应实参时，参数的默认值被当做实参传入</li>\n</ol>\n<h4 id=\"动态参数\"><a href=\"#动态参数\" class=\"headerlink\" title=\"动态参数\"></a>动态参数</h4><p><code>arguments</code> 是函数内部内置的伪数组变量，它包含了调用函数时传入的所有实参。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  <span class=\"comment\">// 求生函数，计算所有参数的和</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(arguments);</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> s = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      s += <span class=\"variable language_\">arguments</span>[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 调用求和函数</span></span><br><span class=\"line\">  <span class=\"title function_\">sum</span>(<span class=\"number\">5</span>, <span class=\"number\">10</span>); <span class=\"comment\">// 两个参数</span></span><br><span class=\"line\">  <span class=\"title function_\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>); <span class=\"comment\">// 两个参数</span></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ol>\n<li><code>arguments</code> 是一个伪数组</li>\n<li><code>arguments</code> 的作用是动态获取函数的实参</li>\n</ol>\n<h4 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"剩余参数\"></a>剩余参数</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">config</span>(<span class=\"params\">baseURL, ...other</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(baseURL);</span><br><span class=\"line\">    <span class=\"comment\">// other 是真数组，动态获取实参</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(other);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 调用函数</span></span><br><span class=\"line\">  <span class=\"title function_\">config</span>(<span class=\"string\">&#x27;http://baidu.com&#x27;</span>, <span class=\"string\">&#x27;get&#x27;</span>, <span class=\"string\">&#x27;json&#x27;</span>);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ol>\n<li><code>...</code> 是语法符号，置于最末函数形参之前，用于获取多余的实参</li>\n<li>借助 <code>...</code> 获取的剩余实参</li>\n<li></li>\n</ol>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3>","categories":["前端面试"],"tags":["回调函数","回调地狱","Promise","Async/Await","闭包","this","指针函数"]},{"title":"项目公用框架组件-tablelist","url":"/2022/07/06/%E9%A1%B9%E7%9B%AE%E5%85%AC%E7%94%A8%E6%A1%86%E6%9E%B6%E7%BB%84%E4%BB%B6-tablelist/","content":"<p>[TOC]</p>\n<h3 id=\"公关组件（无需修改）\"><a href=\"#公关组件（无需修改）\" class=\"headerlink\" title=\"公关组件（无需修改）\"></a>公关组件（无需修改）</h3><h4 id=\"table-vue\"><a href=\"#table-vue\" class=\"headerlink\" title=\"table.vue\"></a>table.vue</h4><p>通过props实现父传子数据显示，$emit实现子传父操作</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;el-card&gt;</span><br><span class=\"line\">      &lt;el-table ref=&quot;table&quot; v-loading=&quot;loading&quot; :data=&quot;dataList&quot; style=&quot;width: 100%&quot; stripe border&gt;</span><br><span class=\"line\">        &lt;!-- v-for 动态渲染表格 template --&gt;</span><br><span class=\"line\">        &lt;template v-for=&quot;(item,index) in keys&quot;&gt;</span><br><span class=\"line\">          &lt;el-table-column :key=&quot;index&quot; :prop=&quot;item.value&quot; :label=&quot;item.label&quot; :width=&quot;item.width&quot; /&gt;</span><br><span class=\"line\">        &lt;/template&gt;</span><br><span class=\"line\">        &lt;el-table-column label=&quot;操作&quot;&gt;</span><br><span class=\"line\">          &lt;!-- 通过作用域插槽，通过点击行，获得父组件行的数据 --&gt;</span><br><span class=\"line\">          &lt;template slot-scope=&quot;&#123; row &#125;&quot;&gt;</span><br><span class=\"line\">            &lt;el-button</span><br><span class=\"line\">              size=&quot;small&quot;</span><br><span class=\"line\">              type=&quot;primary&quot;</span><br><span class=\"line\">              @click=&quot;handleClick(row)&quot;</span><br><span class=\"line\">            &gt;编辑&lt;/el-button&gt;</span><br><span class=\"line\">            &lt;el-button</span><br><span class=\"line\">              size=&quot;small&quot;</span><br><span class=\"line\">              type=&quot;danger&quot;</span><br><span class=\"line\">              @click=&quot;handleDelete(row)&quot;</span><br><span class=\"line\">            &gt;删除&lt;/el-button&gt;</span><br><span class=\"line\">          &lt;/template&gt;</span><br><span class=\"line\">        &lt;/el-table-column&gt;</span><br><span class=\"line\">      &lt;/el-table&gt;</span><br><span class=\"line\">    &lt;/el-card&gt;</span><br><span class=\"line\">    &lt;!-- 分页组件 --&gt;</span><br><span class=\"line\">    &lt;el-row justify=&quot;center&quot; type=&quot;flex&quot; align=&quot;middle&quot; style=&quot;height: 60px&quot;&gt;</span><br><span class=\"line\">      &lt;el-pagination</span><br><span class=\"line\">        :current-page=&quot;page.currentPage&quot;</span><br><span class=\"line\">        :page-size=&quot;page.pageSize&quot;</span><br><span class=\"line\">        layout=&quot;prev, pager, next&quot;</span><br><span class=\"line\">        :total=&quot;page.total&quot;</span><br><span class=\"line\">        @current-change=&quot;handleCurrentChange&quot;</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">    &lt;/el-row&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    // 表格显示信息</span><br><span class=\"line\">    dataList: &#123;</span><br><span class=\"line\">      type: Array,</span><br><span class=\"line\">      default: null</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    keys: &#123;</span><br><span class=\"line\">      type: Array,</span><br><span class=\"line\">      default: null</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // 分页数据</span><br><span class=\"line\">    page: &#123;</span><br><span class=\"line\">      type: Object,</span><br><span class=\"line\">      default: null</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    loading: &#123;</span><br><span class=\"line\">      type: Boolean,</span><br><span class=\"line\">      default: false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\">    console.log(&#x27;loading&#x27;, this.loading)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    handleClick(row) &#123;</span><br><span class=\"line\">      this.$emit(&#x27;handleClick&#x27;, row)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    handleDelete(row) &#123;</span><br><span class=\"line\">      this.$emit(&#x27;handleDelete&#x27;, row)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    handleCurrentChange(newPage) &#123;</span><br><span class=\"line\">      this.$emit(&#x27;handleCurrentChange&#x27;, newPage)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"dialog-vue\"><a href=\"#dialog-vue\" class=\"headerlink\" title=\"dialog.vue\"></a>dialog.vue</h4><p>通过具名插槽插入表单输入框、选择框、等等</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;!-- 新增/编辑对话框 --&gt;</span><br><span class=\"line\">  &lt;el-dialog :title=&quot;titleName&quot; :visible=&quot;showDialog&quot; :before-close=&quot;btnCancel&quot; style=&quot;margin-top: 120px;&quot;&gt;</span><br><span class=\"line\">    &lt;el-form</span><br><span class=\"line\">      ref=&quot;form&quot;</span><br><span class=\"line\">      style=&quot;overflow-y: auto; height: 485px; margin-top: 10px&quot;</span><br><span class=\"line\">      label-width=&quot;150px&quot;</span><br><span class=\"line\">      :rules=&quot;rules&quot;</span><br><span class=\"line\">      :model=&quot;form&quot;</span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">      &lt;slot name=&quot;dialog&quot; /&gt;</span><br><span class=\"line\">    &lt;/el-form&gt;</span><br><span class=\"line\">    &lt;!-- 弹框底部 --&gt;</span><br><span class=\"line\">    &lt;template v-slot:footer&gt;</span><br><span class=\"line\">      &lt;el-row class=&quot;footer&quot; type=&quot;flex&quot; justify=&quot;center&quot;&gt;</span><br><span class=\"line\">        &lt;el-col :span=&quot;24&quot;&gt;</span><br><span class=\"line\">          &lt;el-button @click=&quot;btnCancel&quot;&gt;取消&lt;/el-button&gt;</span><br><span class=\"line\">          &lt;el-button type=&quot;primary&quot; @click=&quot;onSave()&quot;&gt;保存&lt;/el-button&gt;</span><br><span class=\"line\">        &lt;/el-col&gt;</span><br><span class=\"line\">      &lt;/el-row&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\">  &lt;/el-dialog&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    titleName: &#123;</span><br><span class=\"line\">      type: String,</span><br><span class=\"line\">      default: &#x27;&#x27;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    showDialog: &#123;</span><br><span class=\"line\">      type: Boolean,</span><br><span class=\"line\">      default: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    form: &#123;</span><br><span class=\"line\">      type: Object,</span><br><span class=\"line\">      default: null</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    rules: &#123;</span><br><span class=\"line\">      type: Object,</span><br><span class=\"line\">      default: null</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    // 取消对话框</span><br><span class=\"line\">    btnCancel() &#123;</span><br><span class=\"line\">      // 关闭对话框</span><br><span class=\"line\">      this.$emit(&#x27;btnCancel&#x27;, false)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // 新增or修改</span><br><span class=\"line\">    onSave() &#123;</span><br><span class=\"line\">      this.$refs.form.validate((valid) =&gt; &#123;</span><br><span class=\"line\">        // 成功valid为true，失败为false</span><br><span class=\"line\">        if (valid) &#123;</span><br><span class=\"line\">          // 校验通过才会进入下一步</span><br><span class=\"line\">          this.$emit(&#x27;onSave&#x27;)</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          this.$message.error(&#x27;表单校验不通过&#x27;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"基础框架-index-vue-引用公用组件\"><a href=\"#基础框架-index-vue-引用公用组件\" class=\"headerlink\" title=\"基础框架 index.vue 引用公用组件\"></a>基础框架 index.vue 引用公用组件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;div class=&quot;dashboard-container&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;app-container&quot;&gt;</span><br><span class=\"line\">      &lt;h3&gt;软科排名&lt;/h3&gt;</span><br><span class=\"line\">      &lt;!-- table组件展示数据 --&gt;</span><br><span class=\"line\">      &lt;Table</span><br><span class=\"line\">        :data-list=&quot;dataList&quot;</span><br><span class=\"line\">        :keys=&quot;keys&quot;</span><br><span class=\"line\">        :page=&quot;page&quot;</span><br><span class=\"line\">        :loading=&quot;loading&quot;</span><br><span class=\"line\">        @handleClick=&quot;handleClick&quot;</span><br><span class=\"line\">        @handleDelete=&quot;handleDelete&quot;</span><br><span class=\"line\">        @handleCurrentChange=&quot;handleCurrentChange&quot;</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;!-- 对话框组件 --&gt;</span><br><span class=\"line\">      &lt;add-dialog</span><br><span class=\"line\">        ref=&quot;dialog&quot;</span><br><span class=\"line\">        :form=&quot;form&quot;</span><br><span class=\"line\">        :rules=&quot;rules&quot;</span><br><span class=\"line\">        :show-dialog=&quot;showDialog&quot;</span><br><span class=\"line\">        :title-name=&quot;titleName&quot;</span><br><span class=\"line\">        @btnCancel=&quot;btnCancel&quot;</span><br><span class=\"line\">        @onSave=&quot;onSave&quot;</span><br><span class=\"line\">      &gt;</span><br><span class=\"line\">        &lt;!-- 具名插槽传特定的内容 --&gt;</span><br><span class=\"line\">        &lt;template #dialog&gt;</span><br><span class=\"line\">          &lt;el-form-item label=&quot;排名编号&quot; prop=&quot;qs_code&quot;&gt;</span><br><span class=\"line\">            &lt;el-input v-model=&quot;form.qs_code&quot; class=&quot;input_box&quot; :disabled=&quot;titleName.indexOf(&#x27;新增&#x27;)!==-1 ? false : true&quot; /&gt;</span><br><span class=\"line\">          &lt;/el-form-item&gt;</span><br><span class=\"line\">          &lt;el-form-item label=&quot;排名&quot; prop=&quot;qs_rank&quot;&gt;</span><br><span class=\"line\">            &lt;el-input v-model=&quot;form.qs_rank&quot; class=&quot;input_box&quot; :disabled=&quot;titleName.indexOf(&#x27;新增&#x27;)!==-1 ? false : true&quot; /&gt;</span><br><span class=\"line\">          &lt;/el-form-item&gt;</span><br><span class=\"line\">          &lt;el-form-item label=&quot;学校编号&quot; prop=&quot;qs_school&quot;&gt;</span><br><span class=\"line\">            &lt;el-input v-model=&quot;form.qs_school&quot; class=&quot;input_box&quot; /&gt;</span><br><span class=\"line\">          &lt;/el-form-item&gt;</span><br><span class=\"line\">          &lt;el-form-item label=&quot;学校名称&quot; prop=&quot;qs_schoolName&quot;&gt;</span><br><span class=\"line\">            &lt;el-input v-model=&quot;form.qs_schoolName&quot; class=&quot;input_box&quot; /&gt;</span><br><span class=\"line\">          &lt;/el-form-item&gt;</span><br><span class=\"line\">        &lt;/template&gt;</span><br><span class=\"line\">      &lt;/add-dialog&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import Table from &#x27;@/components/common/table.vue&#x27;</span><br><span class=\"line\">import AddDialog from &#x27;@/components/common/add-dialog.vue&#x27;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    Table,</span><br><span class=\"line\">    AddDialog</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      // 表格</span><br><span class=\"line\">      loading: false,</span><br><span class=\"line\">      dataList: [],</span><br><span class=\"line\">      keys: [], // 数据的keys</span><br><span class=\"line\"></span><br><span class=\"line\">      // 分页</span><br><span class=\"line\">      page: &#123;</span><br><span class=\"line\">        currentPage: 1,</span><br><span class=\"line\">        pageSize: 10,</span><br><span class=\"line\">        total: 0</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      //  对话框</span><br><span class=\"line\">      titleName: &#x27;&#x27;,</span><br><span class=\"line\">      showDialog: false,</span><br><span class=\"line\">      form: &#123;&#125;,</span><br><span class=\"line\">      rules: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    // 分页查询所有信息</span><br><span class=\"line\">    getSubjectsByPage() &#123;</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">        this.loading = true</span><br><span class=\"line\"></span><br><span class=\"line\">        this.keys = [</span><br><span class=\"line\">          &#123; label: &#x27;一级学科编号&#x27;, value: &#x27;subject_code&#x27;, width: &#x27;150px&#x27; &#125;,</span><br><span class=\"line\">          &#123; label: &#x27;创建日期&#x27;, value: &#x27;create_time&#x27;, width: &#x27;300px&#x27; &#125;,</span><br><span class=\"line\">          &#123; label: &#x27;更新日期&#x27;, value: &#x27;update_time&#x27;, width: &#x27;300px&#x27; &#125;,</span><br><span class=\"line\">          &#123; label: &#x27;一级学科id&#x27;, value: &#x27;subject_id&#x27;, width: &#x27;150px&#x27; &#125;,</span><br><span class=\"line\">          &#123; label: &#x27;一级学科名称&#x27;, value: &#x27;subject_name&#x27;, width: &#x27;300px&#x27; &#125;,</span><br><span class=\"line\">          &#123; label: &#x27;所属学科门类&#x27;, value: &#x27;discipline_name&#x27;, width: &#x27;150px&#x27; &#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">        this.loading = false</span><br><span class=\"line\">      &#125; catch (err) &#123;</span><br><span class=\"line\">        console.log(err)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    // 换页操作</span><br><span class=\"line\">    handleCurrentChange(newPage) &#123;</span><br><span class=\"line\">      this.page.currentPage = newPage</span><br><span class=\"line\">      //   重新获取数据</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // 打开对话框</span><br><span class=\"line\">    async handleClick(row) &#123;</span><br><span class=\"line\">      if (row.subject_code) &#123;</span><br><span class=\"line\">        // 编辑</span><br><span class=\"line\">        this.titleName = &#x27;编辑一级学科信息&#x27;</span><br><span class=\"line\">        this.form = row</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        // 新增</span><br><span class=\"line\">        this.titleName = &#x27;新增一级学科信息&#x27;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      this.showDialog = true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // 关闭对话框</span><br><span class=\"line\">    btnCancel(value) &#123;</span><br><span class=\"line\">      this.showDialog = value</span><br><span class=\"line\">      // 清空子组件表单校验</span><br><span class=\"line\">      this.$refs.dialog.$refs.form.resetFields()</span><br><span class=\"line\">      // 清空数据</span><br><span class=\"line\">      this.form = &#123; &#x27;subject_id&#x27;: &#x27;&#x27;, &#x27;subject_code&#x27;: &#x27;&#x27;, &#x27;subject_name&#x27;: &#x27;&#x27;, &#x27;subject_discipline&#x27;: &#x27;&#x27; &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onSave() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // async onSave() &#123;</span><br><span class=\"line\">    //   try &#123;</span><br><span class=\"line\">    //     if (this.titleName.indexOf(&#x27;新增&#x27;) !== -1) &#123;</span><br><span class=\"line\">    //       const &#123; data &#125; = await addSubject(this.form)</span><br><span class=\"line\">    //       if (data.code === 200) &#123;</span><br><span class=\"line\">    //         this.$message.success(&#x27;保存成功！&#x27;)</span><br><span class=\"line\">    //       &#125; else &#123;</span><br><span class=\"line\">    //         this.$message.error(data.message)</span><br><span class=\"line\">    //       &#125;</span><br><span class=\"line\">    //     &#125; else &#123;</span><br><span class=\"line\">    //       this.form.subject_code = Number.parseInt(this.form.subject_code)</span><br><span class=\"line\">    //       const &#123; data &#125; = await editSubject(this.form)</span><br><span class=\"line\">    //       if (data.code === 200) &#123;</span><br><span class=\"line\">    //         this.$message.success(&#x27;保存成功！&#x27;)</span><br><span class=\"line\">    //       &#125; else &#123;</span><br><span class=\"line\">    //         this.$message.error(data.message)</span><br><span class=\"line\">    //       &#125;</span><br><span class=\"line\">    //     &#125;</span><br><span class=\"line\">    //   &#125; catch (err) &#123;</span><br><span class=\"line\">    //     console.log(err)</span><br><span class=\"line\">    //   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //   // 刷新数据</span><br><span class=\"line\">    //   this.getSubjectsByPage()</span><br><span class=\"line\">    //   // 关闭对话框</span><br><span class=\"line\">    //   this.showDialog = false</span><br><span class=\"line\">    //   // 清空子组件表单校验</span><br><span class=\"line\">    //   this.$refs.dialog.$refs.form.resetFields()</span><br><span class=\"line\">    //   // 清空数据</span><br><span class=\"line\">    //   this.form = &#123; &#x27;subject_id&#x27;: &#x27;&#x27;, &#x27;subject_code&#x27;: &#x27;&#x27;, &#x27;subject_name&#x27;: &#x27;&#x27;, &#x27;subject_discipline&#x27;: &#x27;&#x27; &#125;</span><br><span class=\"line\">    // &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    handleDelete(row) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //     async handleDelete(row) &#123;</span><br><span class=\"line\">    //       this.$prompt(&#x27;请输入DELETE&#x27;, &#x27;确认删除本行数据？&#x27;, &#123;</span><br><span class=\"line\">    //         confirmButtonText: &#x27;确定&#x27;,</span><br><span class=\"line\">    //         cancelButtonText: &#x27;取消&#x27;,</span><br><span class=\"line\">    //         inputValidator(value) &#123;</span><br><span class=\"line\">    //           return value === &#x27;DELETE&#x27;</span><br><span class=\"line\">    //         &#125;,</span><br><span class=\"line\">    //         inputErrorMessage: &#x27;输入格式不正确，无法删除数据！&#x27;</span><br><span class=\"line\">    //       &#125;).then(async() =&gt; &#123;</span><br><span class=\"line\">    //         await delSubject(row.subject_code)</span><br><span class=\"line\">    //         this.$message(&#123;</span><br><span class=\"line\">    //           type: &#x27;success&#x27;,</span><br><span class=\"line\">    //           message: &#x27;删除数据成功&#x27;</span><br><span class=\"line\">    //         &#125;)</span><br><span class=\"line\">    //         this.getSubjectsByPage() // 刷新数据</span><br><span class=\"line\">    //       &#125;).catch(() =&gt; &#123;</span><br><span class=\"line\">    //         this.$message(&#123;</span><br><span class=\"line\">    //           type: &#x27;info&#x27;,</span><br><span class=\"line\">    //           message: &#x27;取消删除操作&#x27;</span><br><span class=\"line\">    //         &#125;)</span><br><span class=\"line\">    //       &#125;)</span><br><span class=\"line\">    //     &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class=\"line\">::v-deep .el-dialog &#123;</span><br><span class=\"line\">  height: 360px;</span><br><span class=\"line\">  .el-dialog__body &#123;</span><br><span class=\"line\">    height: 260px;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">    padding: 5px 20px 0px 20px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","categories":["实验室项目"],"tags":["前端、项目"]},{"title":"项目 - PC适配 - vue.config.js","url":"/2022/07/30/%E9%A1%B9%E7%9B%AE-PC%E9%80%82%E9%85%8D-vue-config-js/","content":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li>【vue2.0项目PC端随屏幕分辨率与窗口大小自适应】<a href=\"https://blog.csdn.net/weixin_47416539/article/details/125032479\">https://blog.csdn.net/weixin_47416539/article/details/125032479</a></li>\n<li>【vue+px2rem实现pc端大屏自适应(rem适配)】<a href=\"https://codeantenna.com/a/G4TWS25Sdt\">https://codeantenna.com/a/G4TWS25Sdt</a></li>\n</ol>\n<h2 id=\"PC端适配问题\"><a href=\"#PC端适配问题\" class=\"headerlink\" title=\"PC端适配问题\"></a>PC端适配问题</h2><p>用于解决最小化浏览器窗口时，字体和样式大小不变，导致的页面混乱问题。</p>\n<p>解决方式，将px转换为rem</p>\n<h3 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h3><h4 id=\"在根目录src中新建utils目录下新建rem-js等比适配文件\"><a href=\"#在根目录src中新建utils目录下新建rem-js等比适配文件\" class=\"headerlink\" title=\"在根目录src中新建utils目录下新建rem.js等比适配文件\"></a>在根目录src中新建utils目录下新建rem.js等比适配文件</h4><p>我使用的最大放大比例为1 ，呵呵，效果不错！需要自己调试，选出一个合适的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// rem等比适配配置文件</span></span><br><span class=\"line\"><span class=\"comment\">// 基准大小</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> baseSize = <span class=\"number\">16</span></span><br><span class=\"line\"><span class=\"comment\">// 设置 rem 函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setRem</span> () &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当前页面屏幕分辨率相对于 1920宽的缩放比例，可根据自己需要修改</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> scale = <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">clientWidth</span> / <span class=\"number\">1920</span></span><br><span class=\"line\">  <span class=\"comment\">// 设置页面根节点字体大小（“Math.min(scale, 2)” 指最高放大比例为2，可根据实际业务需求调整）</span></span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">style</span>.<span class=\"property\">fontSize</span> = baseSize * <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(scale, <span class=\"number\">1</span>) + <span class=\"string\">&#x27;px&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\"><span class=\"title function_\">setRem</span>()</span><br><span class=\"line\"><span class=\"comment\">// 改变窗口大小时重新设置 rem</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">onresize</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">setRem</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在main-js中引入适配文件\"><a href=\"#在main-js中引入适配文件\" class=\"headerlink\" title=\"在main.js中引入适配文件\"></a>在main.js中引入适配文件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &#x27;./utils/rem.js&#x27;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装postcss-pxtorem\"><a href=\"#安装postcss-pxtorem\" class=\"headerlink\" title=\"安装postcss-pxtorem\"></a>安装postcss-pxtorem</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i postcss-pxtorem@5.1.1 -D</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在vue-config-js内配置\"><a href=\"#在vue-config-js内配置\" class=\"headerlink\" title=\"在vue.config.js内配置\"></a>在vue.config.js内配置</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">css</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">loaderOptions</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">postcss</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">                  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;postcss-pxtorem&#x27;</span>)(&#123;</span><br><span class=\"line\">                    rootValue : <span class=\"number\">16</span>, <span class=\"comment\">// 换算的基数</span></span><br><span class=\"line\">                    selectorBlackList  : [], <span class=\"comment\">// 忽略转换正则匹配项 列入一些ui库, [&#x27;.el&#x27;] 就是忽略elementUI库</span></span><br><span class=\"line\">                    propList   : [<span class=\"string\">&#x27;*&#x27;</span>],</span><br><span class=\"line\">                  &#125;),</span><br><span class=\"line\">                ]</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"PC端禁止用户缩放页面\"><a href=\"#PC端禁止用户缩放页面\" class=\"headerlink\" title=\"PC端禁止用户缩放页面\"></a>PC端禁止用户缩放页面</h2><p>用于禁止移动端双指缩放页面，和PC端ctrl+滚轮缩放页面</p>\n<h3 id=\"实现步骤-1\"><a href=\"#实现步骤-1\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h3><h4 id=\"对于移动端\"><a href=\"#对于移动端\" class=\"headerlink\" title=\"对于移动端\"></a>对于移动端</h4><p>‘可以在<a href=\"https://so.csdn.net/so/search?q=index&spm=1001.2101.3001.7020\">index</a>.html中增加如下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0, user-scalable=no&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"对于PC端：禁止ctrl-鼠标滚轮缩放\"><a href=\"#对于PC端：禁止ctrl-鼠标滚轮缩放\" class=\"headerlink\" title=\"对于PC端：禁止ctrl+鼠标滚轮缩放\"></a>对于PC端：禁止ctrl+鼠标滚轮缩放</h4><p>可以在<a href=\"https://so.csdn.net/so/search?q=index&spm=1001.2101.3001.7020\">index</a>.html中增加如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;mousewheel&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">      e = e || <span class=\"variable language_\">window</span>.<span class=\"property\">event</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((e.<span class=\"property\">wheelDelta</span> &amp;&amp; event.<span class=\"property\">ctrlKey</span>) || e.<span class=\"property\">detail</span>) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        event.<span class=\"title function_\">preventDefault</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"attr\">capture</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"attr\">passive</span>: <span class=\"literal\">false</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;keydown&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((event.<span class=\"property\">ctrlKey</span> === <span class=\"literal\">true</span> || event.<span class=\"property\">metaKey</span> === <span class=\"literal\">true</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">        &amp;&amp; (event.<span class=\"property\">keyCode</span> === <span class=\"number\">61</span> || event.<span class=\"property\">keyCode</span> === <span class=\"number\">107</span></span><br><span class=\"line\"> </span><br><span class=\"line\">          || event.<span class=\"property\">keyCode</span> === <span class=\"number\">173</span> || event.<span class=\"property\">keyCode</span> === <span class=\"number\">109</span></span><br><span class=\"line\"> </span><br><span class=\"line\">          || event.<span class=\"property\">keyCode</span> === <span class=\"number\">187</span> || event.<span class=\"property\">keyCode</span> === <span class=\"number\">189</span>)) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        event.<span class=\"title function_\">preventDefault</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["项目知识"],"tags":["屏幕适配","缩放页面","移动端","PC端"]},{"title":"项目知识 - 事件总线 bus 兄弟间通信","url":"/2022/07/30/%E9%A1%B9%E7%9B%AE%E7%9F%A5%E8%AF%86-%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF-bus-%E5%85%84%E5%BC%9F%E9%97%B4%E9%80%9A%E4%BF%A1/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>当前项目使用tagsView实现多页签效果，并且对已打开的所有多页签使用缓存，避免多次发请求。但是页面之间又是相关关联的，页面A更新后，需要通知页面B重新获取数据。A、B之间的关系可能是父子 ，可能是兄弟，也可能是祖先。因此，采用BUS事件总线实现。</p>\n<h2 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h2><h4 id=\"新增util-x2F-bus-js-用于导出事件总线\"><a href=\"#新增util-x2F-bus-js-用于导出事件总线\" class=\"headerlink\" title=\"新增util&#x2F;bus.js 用于导出事件总线\"></a>新增util&#x2F;bus.js 用于导出事件总线</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 创建事件总线</span><br><span class=\"line\">import Vue from &#x27;vue&#x27;</span><br><span class=\"line\">export const EventBus = new Vue()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"发送事件组件\"><a href=\"#发送事件组件\" class=\"headerlink\" title=\"发送事件组件\"></a>发送事件组件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &#123; EventBus &#125; from &#x27;@/utils/bus&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">// 通知学校一级学科页面刷新</span><br><span class=\"line\">EventBus.$emit(&#x27;refreshSchoolSubjects&#x27;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"接收事件组件\"><a href=\"#接收事件组件\" class=\"headerlink\" title=\"接收事件组件\"></a>接收事件组件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &#123; EventBus &#125; from &#x27;@/utils/bus&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    EventBus.$on(&#x27;refreshSchoolSubjects&#x27;, () =&gt; &#123;</span><br><span class=\"line\">      this.getSchoolSubjectsByPageByConditions()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n","categories":["项目知识"],"tags":["事件总线","BUS"]},{"title":"项目知识1 - $route和$router的区别","url":"/2022/07/14/%E9%A1%B9%E7%9B%AE%E7%9F%A5%E8%AF%861-route%E5%92%8C-router%E7%9A%84%E5%8C%BA%E5%88%AB/","content":"<h2 id=\"route和-router的区别\"><a href=\"#route和-router的区别\" class=\"headerlink\" title=\"$route和$router的区别\"></a>$route和$router的区别</h2><h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ol>\n<li>this.$route和this.$router的区别 [<a href=\"https://www.jianshu.com/p/26631cff7649?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation%5D\">https://www.jianshu.com/p/26631cff7649?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation]</a></li>\n</ol>\n<h3 id=\"问题起源\"><a href=\"#问题起源\" class=\"headerlink\" title=\"问题起源\"></a>问题起源</h3><p>最近在做el-tab实现多页签的功能，需要通过$route判断当前路由，$router.push(path) 实现路由跳转，$router.back() 返回上一个路由。</p>\n<h3 id=\"1-1-route对象\"><a href=\"#1-1-route对象\" class=\"headerlink\" title=\"1.1 $route对象\"></a>1.1 $route对象</h3><p>表示当前激活的路由的状态信息，包含了当前 URL 解析得到的信息，还有 URL 匹配到的 route records（路由记录）。<br><code>$router会被自动注入每个组件中</code>，可以直接利用它进行一些信息的获取。即this.$route来调用。</p>\n<h3 id=\"1-2-route对象出现地方\"><a href=\"#1-2-route对象出现地方\" class=\"headerlink\" title=\"1.2 $route对象出现地方\"></a>1.2 $route对象出现地方</h3><ul>\n<li><p>在组件内，直接通过 this.$route来调用。前提全局注册路由插件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Router</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-router&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">Router</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 可以在项目中使用vue.use()全局注入一个插件，从而不需要在每个组件文件中import插件。</p>\n<p>使用了vue.use()注册插件之后就可以在所有的vue文件中使用路由：this.$route</p>\n</blockquote>\n</li>\n<li><p>在导航守卫的参数内</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">router.<span class=\"title function_\">beforeEach</span>(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// to 和 from 都是 路由信息对象</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">  $route(to, <span class=\"keyword\">from</span>) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// to 和 from 都是 路由信息对象</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-1-router对象\"><a href=\"#2-1-router对象\" class=\"headerlink\" title=\"2.1 $router对象\"></a>2.1 $router对象</h3><p>全局的路由实例，是router构造方法的实例。需要在router&#x2F;index.js 中使用vue-router库进行创建</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Router</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-router&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">createRouter</span> = (<span class=\"params\"></span>) =&gt;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Router</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/login&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"title function_\">import</span>(<span class=\"string\">&#x27;@/views/login/index&#x27;</span>),</span><br><span class=\"line\">            <span class=\"attr\">hidden</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/404&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"title function_\">import</span>(<span class=\"string\">&#x27;@/views/404&#x27;</span>),</span><br><span class=\"line\">            <span class=\"attr\">hidden</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"title function_\">createRouter</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导出router对象</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-其他组件中使用router对象需要先引入\"><a href=\"#2-2-其他组件中使用router对象需要先引入\" class=\"headerlink\" title=\"2.2 其他组件中使用router对象需要先引入\"></a>2.2 其他组件中使用router对象需要先引入</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在其他组件中使用路由对象 , 自动以 router/index.js 作为入口</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/router&#x27;</span> </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-路由实例方法push\"><a href=\"#2-3-路由实例方法push\" class=\"headerlink\" title=\"2.3 路由实例方法push\"></a>2.3 路由实例方法push</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字符串</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$router.push(<span class=\"string\">&#x27;home&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 对象</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$router.push(&#123; path: <span class=\"string\">&#x27;home&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">// 命名的路由</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$router.push(&#123; name: <span class=\"string\">&#x27;user&#x27;</span>, params: &#123; userId: <span class=\"number\">123</span> &#125;&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 带查询参数，变成 /register?plan=123</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$router.push(&#123; path: <span class=\"string\">&#x27;register&#x27;</span>, query: &#123; plan: <span class=\"string\">&#x27;123&#x27;</span> &#125;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><code>push方法其实和&lt;router-link :to=&quot;...&quot;&gt;是等同的</code>。<br> <em>注意：push方法的跳转会向 history 栈添加一个新的记录，当我们点击浏览器的返回按钮时可以看到之前的页面。</em></p>\n<h3 id=\"2-4-路由实例方法go\"><a href=\"#2-4-路由实例方法go\" class=\"headerlink\" title=\"2.4  路由实例方法go\"></a>2.4  路由实例方法go</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 页面路由跳转 前进或者后退</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.go(-<span class=\"number\">1</span>) <span class=\"comment\">// 后退</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-5-路由实例方法replace\"><a href=\"#2-5-路由实例方法replace\" class=\"headerlink\" title=\"2.5 路由实例方法replace\"></a>2.5 路由实例方法replace</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//push方法会向 history 栈添加一个新的记录，而replace方法是替换当前的页面，</span></span><br><span class=\"line\">不会向 history 栈添加一个新的记录</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;router-link to=<span class=\"string\">&quot;/05&quot;</span> replace&gt;<span class=\"number\">05</span>&lt;/router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一般使用replace来做404页面</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.replace(<span class=\"string\">&#x27;/&#x27;</span>)</span><br></pre></td></tr></table></figure>\n","categories":["项目知识"],"tags":["路由"]},{"title":"项目知识 - 子组件在create、mounted中接受不到父组件传来的异步数据","url":"/2022/07/15/%E9%A1%B9%E7%9B%AE%E7%9F%A5%E8%AF%86-%E5%AD%90%E7%BB%84%E4%BB%B6%E5%9C%A8create%E3%80%81mounted%E4%B8%AD%E6%8E%A5%E5%8F%97%E4%B8%8D%E5%88%B0%E7%88%B6%E7%BB%84%E4%BB%B6%E4%BC%A0%E6%9D%A5%E7%9A%84%E5%BC%82%E6%AD%A5%E6%95%B0%E6%8D%AE/","content":"<h1 id=\"子组件在create、mounted中接受不到父组件传来的异步数据\"><a href=\"#子组件在create、mounted中接受不到父组件传来的异步数据\" class=\"headerlink\" title=\"子组件在create、mounted中接受不到父组件传来的异步数据\"></a>子组件在create、mounted中接受不到父组件传来的异步数据</h1><h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li>vue中父组件异步数据通过props方式传递给子组件，子组件接收不到的问题 [<a href=\"https://blog.csdn.net/weixin_43290151/article/details/124954767]\">https://blog.csdn.net/weixin_43290151/article/details/124954767]</a></li>\n<li>Vue生命周期详解 [<a href=\"https://blog.csdn.net/weixin_45054614/article/details/122178368]\">https://blog.csdn.net/weixin_45054614/article/details/122178368]</a></li>\n</ol>\n<h2 id=\"问题来源\"><a href=\"#问题来源\" class=\"headerlink\" title=\"问题来源\"></a>问题来源</h2><p>最近在写项目结构时候遇到了这个问题，项目结构如下：父组件地理信息&#x2F;index.js中包含三个子组件：区域组件、省份组件、城市组件。</p>\n<p>需求：在index.js中通过后端接口获取所有区域信息、再遍历每个区域，获取区域下的省份，组成所有省份信息。将所有区域信息传递给省份组件用于显示每个区域下有哪些省份，所有省份信息传递给城市组件用于显示每个省份下有哪些城市。遇到了问题：城市组件在页面渲染时候获取不到父组件传来的数据。</p>\n<h2 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h2><p>由于所有省份信息是在index.js页面以后端请求的方式异步获取的，根据父子组件的生命周期流程，父组件要等子组件的生命周期走完，即子组件mounted完后，父组件才会mounted。而mounted钩子默认加载只会执行一次，子组件的mounted钩子执行的时候，父组件的异步数据还没有传递过来。</p>\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><h4 id=\"方案一-使用v-if控制子组件渲染的时机\"><a href=\"#方案一-使用v-if控制子组件渲染的时机\" class=\"headerlink\" title=\"方案一 使用v-if控制子组件渲染的时机\"></a>方案一 使用v-if控制子组件渲染的时机</h4><h5 id=\"父组件\"><a href=\"#父组件\" class=\"headerlink\" title=\"父组件\"></a>父组件</h5><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-tab-pane</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;城市信息管理&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;third&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">City</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;allprovinces.length !== 0&quot;</span> <span class=\"attr\">:allprovinces</span>=<span class=\"string\">&quot;allprovinces&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">el-tab-pane</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"子组件\"><a href=\"#子组件\" class=\"headerlink\" title=\"子组件\"></a>子组件</h5><blockquote>\n<p> 这种方式，子组件不用动代码，在父组件中去做控制即可</p>\n</blockquote>\n<p>但是这种方式有一个小小的缺点，就是最终效果会显得组件有些延迟才出现效果。因为异步数据是从后端的接口获取的，如果接口时间长一些的话，最终效果渲染也会慢一点，但是！！！一般情况下，后端的接口速度都会控制在几十到几百毫秒的时间，一般情况下，不会出现好几秒，甚至几十秒的接口，所以瑕不掩瑜，这种方式不影响我们使用</p>\n<h4 id=\"方案二-子组件使用watch监听父组件传递过来的数据\"><a href=\"#方案二-子组件使用watch监听父组件传递过来的数据\" class=\"headerlink\" title=\"方案二 子组件使用watch监听父组件传递过来的数据\"></a>方案二 子组件使用watch监听父组件传递过来的数据</h4><h5 id=\"父组件-1\"><a href=\"#父组件-1\" class=\"headerlink\" title=\"父组件\"></a>父组件</h5><p>这种方式父组件正常传递数据即可，不需要做什么代码处理，只要在子组件中加一个监听即可</p>\n<h5 id=\"子组件-1\"><a href=\"#子组件-1\" class=\"headerlink\" title=\"子组件\"></a>子组件</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">props</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">allprovince</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"title class_\">Array</span>,</span><br><span class=\"line\">      <span class=\"attr\">default</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 监听到父组件传递过来的数据后，加工一下，</span></span><br><span class=\"line\">    <span class=\"comment\">// 存到data中去，然后在页面上使用</span></span><br><span class=\"line\">    <span class=\"title function_\">allprovince</span>(<span class=\"params\">newnew, oldold</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;监听&quot;</span>, newnew, oldold)</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">allprovince_total</span> = newnew</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">allprovince_total</span>: [],</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"相关知识\"><a href=\"#相关知识\" class=\"headerlink\" title=\"相关知识\"></a>相关知识</h2><h3 id=\"Vue生命周期\"><a href=\"#Vue生命周期\" class=\"headerlink\" title=\"Vue生命周期\"></a>Vue生命周期</h3><img src=\"/2022/07/15/%E9%A1%B9%E7%9B%AE%E7%9F%A5%E8%AF%86-%E5%AD%90%E7%BB%84%E4%BB%B6%E5%9C%A8create%E3%80%81mounted%E4%B8%AD%E6%8E%A5%E5%8F%97%E4%B8%8D%E5%88%B0%E7%88%B6%E7%BB%84%E4%BB%B6%E4%BC%A0%E6%9D%A5%E7%9A%84%E5%BC%82%E6%AD%A5%E6%95%B0%E6%8D%AE/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png\" class=\"\" title=\"vue生命周期\">\n\n<h3 id=\"父子组件生命周期执行顺序\"><a href=\"#父子组件生命周期执行顺序\" class=\"headerlink\" title=\"父子组件生命周期执行顺序\"></a>父子组件生命周期执行顺序</h3><p>加载渲染数据过程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">父组件 beforeCreate --&gt;</span><br><span class=\"line\">父组件 created --&gt;</span><br><span class=\"line\">父组件 beforeMount --&gt;</span><br><span class=\"line\">子组件 beforeCreate --&gt;</span><br><span class=\"line\">子组件 created --&gt;</span><br><span class=\"line\">子组件 beforeMount --&gt;</span><br><span class=\"line\">子组件 mounted --&gt;</span><br><span class=\"line\">父组件 mounted --&gt;</span><br></pre></td></tr></table></figure>\n\n<p>更新渲染数据过程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">父组件 beforeUpdate --&gt;</span><br><span class=\"line\">子组件 beforeUpdate --&gt;</span><br><span class=\"line\">子组件 updated --&gt;</span><br><span class=\"line\">父组件 updated --&gt;</span><br></pre></td></tr></table></figure>\n\n<p>销毁组件数据过程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">父组件 beforeDestroy --&gt;</span><br><span class=\"line\">子组件 beforeDestroy --&gt;</span><br><span class=\"line\">子组件 destroyed --&gt;</span><br><span class=\"line\">父组件 destroyed</span><br></pre></td></tr></table></figure>\n\n<p>可以这样理解，父组件生命周期中会先看看子组件的生命周期有没有走完，<code>子组件生命周期走完了，才会走完父组件的生命周期</code>。</p>\n","categories":["项目知识"],"tags":["父传子"]},{"title":"项目知识2 - vuex的使用、action和mutation的区别","url":"/2022/07/14/%E9%A1%B9%E7%9B%AE%E7%9F%A5%E8%AF%862-vuex%E7%9A%84%E4%BD%BF%E7%94%A8%E3%80%81action%E5%92%8Cmutation%E7%9A%84%E5%8C%BA%E5%88%AB/","content":"<h1 id=\"vuex的使用、action和mutation的区别\"><a href=\"#vuex的使用、action和mutation的区别\" class=\"headerlink\" title=\"vuex的使用、action和mutation的区别\"></a>vuex的使用、action和mutation的区别</h1><h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li>action和mutation区别 [<a href=\"https://www.jianshu.com/p/f9213af4bcb1]\">https://www.jianshu.com/p/f9213af4bcb1]</a></li>\n</ol>\n<h2 id=\"action和mutation的区别\"><a href=\"#action和mutation的区别\" class=\"headerlink\" title=\"action和mutation的区别\"></a>action和mutation的区别</h2><blockquote>\n<p>action中处理业务代码、异步请求。不能操作State</p>\n<p>mutation专注于修改State，理论上是修改State的唯一途径。必须同步执行</p>\n</blockquote>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>定义action</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">  <span class=\"comment\">//  获取异步的数据 context表示当前的store的实例 可以通过 context.state 获取状态 也可以通过context.commit 来提交mutations， 也可以 context.diapatch调用其他的action</span></span><br><span class=\"line\">    getAsyncCount (context) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 一秒钟之后 要给一个数 去修改state</span></span><br><span class=\"line\">        context.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;addCount&#x27;</span>, <span class=\"number\">123</span>)</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125; </span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"项目应用\"><a href=\"#项目应用\" class=\"headerlink\" title=\"项目应用\"></a>项目应用</h2><p>由于地理信息（所有区域、省份、城市）在多个页面都需要获取，如果每个页面都通过请求获取，会重复多次请求同一个地址，导致项目加载效率低。因此采用vuex获取所有地理信息，并保存。每次使用的时候先从state中进行获取，如果state中没有信息再调用请求获取。</p>\n<h4 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h4><p>获取所有区域信息</p>\n<ul>\n<li>如果state.regions为空，则自行通过get请求获取所有Regions，并使用setRegions 设置 regions的值</li>\n<li>每次update、delete、insert后，都要通过get请求重新获取所有Regions</li>\n</ul>\n<p>获取所有省份信息</p>\n<ul>\n<li>setRegions 设置 regions的值后需要重新获取所有省份信息</li>\n<li>编辑省份后需要重新获取所有省份信息</li>\n</ul>\n<p>获取所有城市信息</p>\n<ul>\n<li>setRegions 设置 regions的值后需要重新获取城市信息</li>\n<li>编辑城市后需要重新获取</li>\n</ul>\n<p>编辑区域信息后，需要重新获取所有区域、省份、城市</p>\n<p>编辑省份后，需要重新所有省份、城市</p>\n<p>编辑城市后，需要重新获取所有城市</p>\n","categories":["项目查漏补缺"],"tags":["vuex"]}]